[{"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/index.js":"1","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/App.js":"2","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/Context/AuthContext.js":"3","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/SignupPage/index.jsx":"4","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/HomePage/index.jsx":"5","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage/index.jsx":"6","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/PoolConnection/index.js":"7","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/config.js":"8","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/scripts.js":"9","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/sshData/index.js":"10","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/membersData/index.js":"11","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/GpuData/index.js":"12","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/SystemSpecs/index.jsx":"13","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/TopBar/index.jsx":"14","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/GpuNode/index.jsx":"15","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/services/dockerCreation.js":"16"},{"size":306,"mtime":1694081723441,"results":"17","hashOfConfig":"18"},{"size":640,"mtime":1694081723437,"results":"19","hashOfConfig":"18"},{"size":1113,"mtime":1694081723437,"results":"20","hashOfConfig":"18"},{"size":4661,"mtime":1691582911246,"results":"21","hashOfConfig":"18"},{"size":2998,"mtime":1696998773352,"results":"22","hashOfConfig":"18"},{"size":6575,"mtime":1697094577579,"results":"23","hashOfConfig":"18"},{"size":598,"mtime":1691576510432,"results":"24","hashOfConfig":"18"},{"size":144,"mtime":1697615391006,"results":"25","hashOfConfig":"18"},{"size":7051,"mtime":1697629170623,"results":"26","hashOfConfig":"18"},{"size":3979,"mtime":1697202509433,"results":"27","hashOfConfig":"18"},{"size":1277,"mtime":1695737832445,"results":"28","hashOfConfig":"18"},{"size":14614,"mtime":1698123694943,"results":"29","hashOfConfig":"18"},{"size":1707,"mtime":1697630389981,"results":"30","hashOfConfig":"18"},{"size":1645,"mtime":1694081723441,"results":"31","hashOfConfig":"18"},{"size":17260,"mtime":1698057817462,"results":"32","hashOfConfig":"18"},{"size":16996,"mtime":1697777742111,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"byy1at",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/index.js",[],["74","75"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/App.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/Context/AuthContext.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/SignupPage/index.jsx",["76"],"import React, { useState } from 'react'\nimport { pool } from '../../database/PoolConnection'\nimport { Modal, Button } from 'react-bootstrap'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.css' // Import custom CSS file for Signup component styling\nimport * as Yup from 'yup'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst SignupPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showModal, setShowModal] = useState(false) // State to control the modal visibility\n  const [errors, setErrors] = useState({ email: '', password: '' })\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleSignup = async () => {\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message\n              return acc\n            },\n            {}\n          )\n          setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n\n          Object.values(validationErrorsMap).forEach(errorMsg => {\n            toast.error(errorMsg)\n          })\n        }\n        return\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const saltRounds = 10\n        const hashedPassword = await bcrypt.hash(password, saltRounds)\n        const query =\n          'INSERT INTO client_user (email, password) VALUES ($1, $2)'\n        await client.query(query, [email, hashedPassword])\n        console.log('User registered')\n        client.release()\n        setShowModal(true) // Show the success modal\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false) // Close the modal\n  }\n\n  return (\n    <div className=\"signup-container\">\n      <ToastContainer /> \n      <form className=\"signup-form\">\n        <h2 className=\"signup-heading\">Signup</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"signup-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"signup-input\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"signup-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"signup-input\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Enter your password\"\n            value={password}\n            onChange={handleInputChange}\n          />\n        </div>\n        <button type=\"button\" className=\"signup-button\" onClick={handleSignup}>\n          Signup\n        </button>\n        <a href=\"/\" className=\"login-link\">\n          Already have an account? Login\n        </a>\n\n        {/* Success Modal */}\n        <Modal show={showModal} onHide={handleCloseModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Success</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            User registration successful. You can now log in with your\n            credentials.\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleCloseModal}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </form>\n    </div>\n  )\n}\n\nexport default SignupPage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/HomePage/index.jsx",["77","78","79"],"import React, { useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport SystemSpecs from '../../components/SystemSpecs'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { removeGpuData,updateGpuStatus } from '../../database/GpuData'\nimport { removeSshCredientials } from '../../database/sshData'\nimport { execShellCommand,getCpuID,getMacAddress } from '../../utils/scripts'\nimport TopBar from '../../components/TopBar'\nimport { SecondaryButton } from 'qlu-20-ui-library'\nimport './style.scss'\nconst ngrok = window.require('ngrok')\n\nconst HomePage = () => {\n  const navigate = useNavigate()\n  const { logout } = useContext(AuthContext)\n\n  // const handleWithdraw = async () => {\n  //   try {\n  //     await removeSshCredientials()\n  //     await removeGpuData()\n  //     await stopAndDeleteContainer(IMAGE_NAME)\n  //     await ngrok.disconnect()\n  //     setIsLend(false)\n  //   } catch (err) {\n  //     setErrorMessage(\n  //       'Withdrawal failed. Please try again. Error: ' + err.message\n  //     )\n  //     setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n  //     console.log(err)\n  //   }\n  // }\n\n  const handleLogout = async () => {\n      const macAddress = await getMacAddress();\n      const cpuId= await getCpuID();\n      console.log(\"MacAddress in GpuNode\", macAddress);\n      console.log(\"Cpu id  in GpuNode\", cpuId);\n    // removeSshCredientials()\n    // removeGpuData()\n        const user_id = JSON.parse(localStorage.getItem('userData')).id\n        console.log(\"User_idddddddd\",user_id);\n        await updateGpuStatus(user_id,macAddress,cpuId,'disconnected'); // Update gpu_status to 'active'\n      \n        logout()\n    ngrok.disconnect()\n    navigate('/')\n  }\n\n  return (\n    <>\n      <TopBar />\n      <div className=\"main-content\">\n      <div className=\"gpu-bar\">\n        <div className=\"active-gpus\">\n          <div className=\"text\">\n          Active Gpu's\n          </div>\n          \n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"87\"\n            height=\"2\"\n            viewBox=\"0 0 87 2\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M1 1H86\"\n              stroke=\"#FF8D4E\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n        <div className=\"total-gpus\">\n          <div className=\"text\">Total Gpus</div>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"87\"\n            height=\"2\"\n            viewBox=\"0 0 87 2\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M1 1H86\"\n              stroke=\"#FF8D4E\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n        \n      </div>\n      <SystemSpecs />\n      </div>\n    <div className=\"logout-button\">\n    <SecondaryButton text='Logout' onClick={handleLogout}/>\n    </div>\n \n    </>\n  )\n}\n\nexport default HomePage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage/index.jsx",["80","81","82","83"],"\nimport React, { useState, useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { pool } from '../../database/PoolConnection'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.scss'\nimport * as Yup from 'yup'\nimport { AuthNavBar,InputField, Loader} from 'qlu-20-ui-library'\nimport { addNgrokToken } from '../../database/membersData'\nconst { dialog } = window.require('electron').remote;\nconst prompt = window.require('electron-prompt');\nconst { exec } = window.require('child_process')\n\n//const { addNgrokToken } = require('../../database/membersData');\n\n// const { ipcRenderer } = window.require('electron');\n\nlet user_id;\nconst config = require('../../utils/config')\n\nconst execShellCommand = cmd => {\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stdout || stderr)\n      }\n    })\n  })\n}\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const navigate = useNavigate()\n  const { login } = useContext(AuthContext)\n  const [emailError, setEmailError] = useState('')\n  const [passwordError, setPasswordError] = useState('')\n  const [loading, setLoading] = useState(false);\n\n  let options = {\n      title: 'Enter Ngrok Auth Token',\n      label: 'AuthToken:',\n      value: '',\n      inputAttrs: { type: 'text' },\n      type: 'input'\n};\nlet userInputToken;\n\n  const LoginHandler = async (email, password) => {\n    setLoading(true);\n    setEmailError('');\n    setPasswordError('');\n    // const authToken = await ipcRenderer.invoke('get-ngrok-auth-token');\n\n    try {\n      await validationSchema.validate({ email, password }, { abortEarly: false });\n\n      const response = await fetch(config.apiUrl + '/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      }).then((response) => response.json());\n\n      if (response.success === true) {\n        console.log(\"Login User Response:\",response.user);\n        user_id=response.user.id;\n        localStorage.setItem('userData', JSON.stringify(response.user));\n        console.log(\"Xhqr token:\",response.user.xhqr);\n        localStorage.setItem('xhqr', JSON.stringify(response.user?.xhqr));\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        console.log(\"user data from localStorage:\",userData);\n        if (userData && userData.ngrok_token === null) { \n          console.log(\"here to ask for token\");\n         await prompt(options).then(r => {\n              if (r !== null && r.trim() !== \"\") {\n                console.log(\"rrrrr111\",r);\n                userInputToken = r;\n                console.log(\"user input token:\",userInputToken);\n              } else {\n                console.log(\"rrrrr222\",r);\n                toast.error('Please Enter Authtoken to Proceed');\n              }\n            })\n        \n          console.log(\"here to ask for token2\");\n          if (userInputToken) {\n              userData.ngrok_token = userInputToken; // Update the ngrok_token in userData object\n              console.log(\"Token Input by user:\",userData.ngrok_token);\n              localStorage.setItem('userData', JSON.stringify(userData));  // Store the updated userData back to localStorage\n              await addNgrokToken(user_id, userInputToken);\n              navigate('/homepage'); \n          }\n      } else if (userData && userData.ngrok_token) {\n        console.log(\"navigating to homepage....\")\n        navigate('/homepage');\n      }\n        \n      } else {\n        toast.error('Incorrect email or password. Please re-enter.');\n      }\n    } catch (validationError) {\n      // Handle Yup validation errors\n      validationError.inner.forEach((error) => {\n        if (error.path === 'email') {\n          setEmailError(error.message);\n        } else if (error.path === 'password') {\n          setPasswordError(error.message);\n        }\n        toast.error(error.message);\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\nreturn (\n    <div className=\"login-page\">\n      <div className=\"top_nav_bar\">\n        <AuthNavBar\n        text=\"Don't have an account?\"\n        textColor=\"gray\"\n        buttonText=\"Sign up\"\n        buttonColorVaraint=\"primaryOrangeBorderAndText\"\n        ></AuthNavBar>\n      </div>\n      <div className=\"login-container\">\n      <h3>Login</h3>\n        <div className=\"login-details\">\n          <div className=\"email\">\n          <label className=\"email\">WORK EMAIL</label>\n          <InputField\n              id=\"email\"\n              value={email}\n              onChangeHandler={e => setEmail(e.target.value)}\n              placeholder='Enter your email address'\n              required\n            />\n             {emailError && <p className=\"error-message\">{emailError}</p>}\n          </div>\n          <div className=\"pass\">\n          <label htmlFor=\"\" className=\"password\">\n              PASSWORD\n            </label>\n            <InputField\n              type=\"password\"\n              value={password}\n              placeholder='Enter your password'\n              onChangeHandler={e => setPassword(e.target.value)}\n              required\n            />\n            {passwordError && <p className=\"error-message\">{passwordError}</p>}\n          </div>\n          <div className=\"button\">\n          <button\n            type=\"submit\"\n            className=\"primaryButton\"\n            onClick={() => LoginHandler(email,password)}\n            disabled={loading}\n          >\n           {loading ? <Loader/> : 'Login'}\n          </button>\n        </div>\n        </div>\n      </div>\n      <ToastContainer position=\"top-right\" autoClose={3000} />\n    </div>\n\n   \n  )\n}\n\nexport default LoginPage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/PoolConnection/index.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/config.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/scripts.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/sshData/index.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/membersData/index.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/GpuData/index.js",["84","85"],"import { pool } from '../PoolConnection'\nimport { addSshCredientials } from '../../database/sshData'\n\n//const SERVER_URL = import.meta.env.VITE_APP_SERVER_URL;\nconst config = require('../../utils/config')\n\nexport const addGpuData = async (\n  systemSpecs,\n  user_id,\n  image_id,\n  gpu_status,\n  containerName\n) => {\n  try {\n    console.log('in Add gpu data')\n    console.log('Image ID in add gpu data: ' + image_id)\n    console.log('User ID in add gpu data:' + user_id)\n    console.log('System specs in add gpu data:' + systemSpecs)\n    console.log('gpu status in add gpu data: ' + gpu_status)\n    console.log('container name in add gpu data:' + containerName)\n\n    const org_id = JSON.parse(localStorage.getItem('userData')).org_id\n\n    const gpuDataList = systemSpecs['gpu']\n    const ramData = systemSpecs['ram']\n    const cpuData = systemSpecs['cpu']\n    const macAddress = systemSpecs['mac']\n    const cpuSerialId = systemSpecs['cpuId']\n\n    console.log('gpuDataList in add gpu data: ' + gpuDataList)\n    console.log('ramData in add gpu data:' + ramData)\n    console.log('cpuData in add gpu data:' + cpuData)\n    console.log('macAddress in add gpu data: ' + macAddress)\n    console.log('cpuSerialId in add gpu data:' + cpuSerialId)\n\n    if (user_id === null && image_id === null) {\n      throw 'Error adding data to the database ERROR: User or Docker Image Not Found'\n    }\n\n    console.log('MacAddress in add gpu data', macAddress)\n    console.log('Cpu id  in add gpu data', cpuSerialId)\n\n    const insertedIds = []\n\n    const gpuData = gpuDataList[0]\n    // for (const gpuData of gpuDataList) {\n    console.log(\n      'userID and gpuData.index in add gpu data: ' + user_id,\n      gpuData.index\n    )\n    const requestBody = {\n      gpuData: gpuData ? gpuData.name : null,\n      gpuFree: gpuData ? gpuData.free : null,\n      gpuUsed: gpuData ? gpuData.used : null,\n      gpuTotal: gpuData ? gpuData.total : null,\n      ramFree: ramData ? ramData.free : null,\n      ramUsed: ramData ? ramData.used : null,\n      cpuData: cpuData ? cpuData : null,\n      user_id: user_id ? user_id : null,\n      image_id: image_id ? image_id : null,\n      gpu_status: gpu_status ? gpu_status : null,\n      gpu_index: gpuData ? gpuData.index : null,\n      org_id: org_id ? org_id : null,\n      macAddress: macAddress ? macAddress : null,\n      cpuSerialId: cpuSerialId ? cpuSerialId : null\n    }\n    console.log('Request Body in add gpu data: ' + JSON.stringify(requestBody))\n\n    try {\n      const response = await addSystemSpecs(requestBody)\n      insertedIds.push(response.id)\n    } catch (err) {\n      console.error('Error inserting data', err)\n      // Handle the error here\n    }\n    // }\n\n    await addSshCredientials(containerName)\n    console.log('Data Inserted.....indocker_ssh')\n    const validInsertedIds = insertedIds.filter(id => id !== null)\n    localStorage.setItem('current_job_id', validInsertedIds)\n  } catch (err) {\n    console.error('Error inserting data', err)\n    throw err\n  }\n}\nexport const addSystemSpecs = async requestBody => {\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    console.log('Token in add gpu data for addSystemSpecs: ' + token)\n    console.log('Here to call addSystemSpecs Api')\n\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/addSystemSpecs`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify(requestBody)\n      }\n    ).then(response => response.json())\n    if (response.success) {\n      console.log('Response from addSystemSpecs', JSON.parse(response.request))\n      const jsonObject = JSON.parse(response.request)\n      console.log('Inserted data with ID:', response.request)\n\n      const insertedId = jsonObject[0].id\n      localStorage.setItem('current_job_id', insertedId)\n      return jsonObject[0].id\n    } else {\n      console.log('False response from Backend of addSystemSpecs.')\n    }\n  } catch (err) {\n    console.error('Error adding data via fetch', err)\n    throw err\n  }\n}\nexport const checkExistingRecord = async (\n  macAddress,\n  cpuSerialId,\n  gpu_index,\n  user_id\n) => {\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    console.log('Token in Checking Existing Record:', token)\n    console.log('macAdress in checkExistingRecord:', macAddress)\n    console.log('cpuSerialId in checkExistingRecord:', cpuSerialId)\n    console.log('user_id in checkExistingRecord:', user_id)\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/checkExistingRecord`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify({ macAddress, cpuSerialId, gpu_index, user_id })\n      }\n    ).then(response => response.json())\n    console.log('Resonse of Duplicate Success?,', response.success)\n    console.log('Response Received,', response)\n    if (!response.success) {\n      throw new Error('Failed to check duplicate GPU data')\n    }\n\n    // const responseData = await response.json();\n    // console.log(\"Response Dataa: \" + responseData);\n    return response.request.isDuplicate // true if duplicate, false otherwise\n  } catch (err) {\n    console.error('Error checking duplicate GPU data', err)\n    throw err\n  }\n}\n\n// export const removeGpuData = async () => {\n//   // Insert the data into the PostgreSQL database\n//   const query = `DELETE FROM system_specs s WHERE s.id = ${localStorage.getItem(\n//     'current_job_id'\n//   )}`\n\n//   try {\n//     const result = await pool.query(query)\n//     localStorage.removeItem('current_job_id')\n//   } catch (err) {\n//     throw ('Error Deleting data', err)\n//   }\n// }\nexport const removeGpuData = async () => {\n  const currentJobId = localStorage.getItem('current_job_id')\n\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/removeGpuData`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify({ current_job_id: currentJobId })\n      }\n    )\n\n    if (!response.success) {\n      throw new Error('Failed to delete GPU data')\n    }\n\n    localStorage.removeItem('current_job_id')\n    console.log('GPU data removed successfully')\n  } catch (err) {\n    console.error('Error deleting GPU data', err)\n    throw err\n  }\n}\n// export const removeGpuUserData = async user_id => {\n//   const deleteQuery = `DELETE FROM system_specs WHERE user_id = $1`\n//   const deleteValues = [user_id ? user_id : null]\n\n//   try {\n//     await pool.query(deleteQuery, deleteValues)\n//     console.log('Removed GPU data for user:', user_id)\n//   } catch (err) {\n//     console.error('Error removing GPU data', err)\n//     throw ('Error removing GPU data', err)\n//   }\n// }\nexport const removeUserGpuData = async user_id => {\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/removeGpuUserData`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify({ user_id })\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error('Failed to remove GPU data for user')\n    }\n\n    //const data = await response.json()\n  } catch (err) {\n    console.error('Error removing GPU data for user', err)\n    throw err\n  }\n}\n\n// export const getImageId = async user_id => {\n//   // Insert the data into the PostgreSQL database\n\n//   const query = `SELECT image_id FROM system_specs s WHERE s.user_id = ${user_id}`\n//   try {\n//     const result = await pool.query(query)\n//     console.log(\"Image Id result:\", result);\n//     return result?.rows[0]?.image_id\n//   } catch (err) {\n//     throw ('Error getting data', err)\n//   }\n// }\n\nexport const getImageId = async user_id => {\n  try {\n    console.log('Getting Image ID user_id', user_id)\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    const response = await fetch(`${config.apiUrl}/system_specs/getImageId`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify({ user_id })\n    }).then(response => response.json())\n\n    if (!response.success) {\n      throw new Error('Failed to get image ID')\n    }\n    console.log('Image ID response: ', response)\n    return response.request\n  } catch (err) {\n    console.error('Error getting image ID', err)\n    throw err\n  }\n}\n\n// export const updateGpuStatus = async (user_id, gpu_status) => {\n//   const updateQuery = `UPDATE system_specs SET gpu_status = $1 WHERE user_id = $2`\n//   const updateValues = [\n//     gpu_status ? gpu_status : null,\n//     user_id ? user_id : null\n//   ]\n\n//   try {\n//     await pool.query(updateQuery, updateValues)\n//     console.log('Updated gpu_status for user:', user_id)\n//   } catch (err) {\n//     console.error('Error updating gpu_status', err)\n//     throw ('Error updating gpu_status', err)\n//   }\n// }\n\nexport const updateGpuStatus = async (\n  user_id,\n  macAddress,\n  cpuId,\n  gpu_status\n) => {\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/updateGpuStatus`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify({ user_id, macAddress, cpuId, gpu_status })\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error('Failed to update GPU status')\n    }\n\n    const data = await response.json()\n    console.log('Updated gpu_status for user:', user_id)\n    return data.success\n  } catch (err) {\n    console.error('Error updating gpu_status', err)\n    throw err\n  }\n}\n\n// import { pool } from '../PoolConnection'\n// import { addSshCredientials } from '../../database/sshData'\n\n// export const addGpuData = async (\n//   systemSpecs,\n//   user_id,\n//   image_id,\n//   gpu_status\n// ) => {\n//   const gpuDataList = systemSpecs['gpu'];\n//   const ramData = systemSpecs['ram'];\n//   const cpuData = systemSpecs['cpu'];\n//   const org_id = JSON.parse(localStorage.getItem(\"userData\")).org_id;\n//   console.log(\"org iddddd\", org_id);\n// console.log(\"gpustatuss\",gpu_status);\n//   if (user_id === null && image_id === null) {\n//     throw 'Error adding data to the database ERROR: User or Docker Image Not Found';\n//   }\n\n//   try {\n//     await Promise.all(\n//       gpuDataList.map(async (gpuData) => {\n//         const existingRecord = await checkExistingRecord(user_id, gpuData.index);\n\n//         if (!existingRecord) {\n//           const query =\n//             'INSERT INTO system_specs (gpu_name, gpu_free, gpu_used, gpu_total, ram_free, ram_used, cpu_name, user_id, image_id, gpu_status, gpu_index,org_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id';\n\n//           const values = [\n//             gpuData ? gpuData.name : null,\n//             gpuData ? gpuData.free : null,\n//             gpuData ? gpuData.used : null,\n//             gpuData ? gpuData.total : null,\n//             ramData ? ramData.free : null,\n//             ramData ? ramData.used : null,\n//             cpuData ? cpuData : null,\n//             user_id ? user_id : null,\n//             image_id ? image_id : null,\n//             gpu_status ? gpu_status : null,\n//             gpuData ? gpuData.index : null,\n//             org_id ? org_id : null\n//           ];\n\n//           try {\n//             const result = await pool.query(query, values);\n//             const insertedId = result.rows[0].id;\n//             localStorage.setItem('current_job_id', insertedId);\n//             console.log('Inserted data with ID:', insertedId);\n//           } catch (err) {\n//             console.error('Error inserting data', err);\n//             throw err;\n//           }\n//         } else {\n//           console.log('Data for GPU index', gpuData.index, 'already exists. Skipping insertion.');\n//         }\n//       })\n//     );\n\n//     await addSshCredientials();\n//   } catch (err) {\n//     console.error('Error inserting data', err);\n//     throw err;\n//   }\n// };\n// export const checkExistingRecord = async (user_id, gpu_index) => {\n//   const query = 'SELECT COUNT(*) FROM system_specs WHERE user_id = $1 AND gpu_index = $2';\n//   const values = [user_id, gpu_index];\n\n//   try {\n//     const result = await pool.query(query, values);\n//     const existingRecordsCount = result.rows[0].count;\n//     return existingRecordsCount > 0;\n//   } catch (err) {\n//     console.error('Error checking existing record', err);\n//     throw err;\n//   }\n// };\n\n// export const removeGpuData = async () => {\n//   // Insert the data into the PostgreSQL database\n//   const query = `DELETE FROM system_specs s WHERE s.id = ${localStorage.getItem(\n//     'current_job_id'\n//   )}`\n\n//   try {\n//     const result = await pool.query(query)\n//     localStorage.removeItem('current_job_id')\n//   } catch (err) {\n//     throw ('Error Deleting data', err)\n//   }\n// }\n// export const removeGpuUserData = async user_id => {\n//   const deleteQuery = `DELETE FROM system_specs WHERE user_id = $1`\n//   const deleteValues = [user_id ? user_id : null]\n\n//   try {\n//     await pool.query(deleteQuery, deleteValues)\n//     console.log('Removed GPU data for user:', user_id)\n//   } catch (err) {\n//     console.error('Error removing GPU data', err)\n//     throw ('Error removing GPU data', err)\n//   }\n// }\n\n// export const getImageId = async user_id => {\n//   // Insert the data into the PostgreSQL database\n\n//   const query = `SELECT image_id FROM system_specs s WHERE s.user_id = ${user_id}`\n//   try {\n//     const result = await pool.query(query)\n//     return result?.rows[0]?.image_id\n//   } catch (err) {\n//     throw ('Error getting data', err)\n//   }\n// }\n\n// export const updateGpuStatus = async (user_id, gpu_status) => {\n//   const updateQuery = `UPDATE system_specs SET gpu_status = $1 WHERE user_id = $2`\n//   const updateValues = [\n//     gpu_status ? gpu_status : null,\n//     user_id ? user_id : null\n//   ]\n\n//   try {\n//     await pool.query(updateQuery, updateValues)\n//     console.log('Updated gpu_status for user:', user_id)\n//   } catch (err) {\n//     console.error('Error updating gpu_status', err)\n//     throw ('Error updating gpu_status', err)\n//   }\n// }\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/SystemSpecs/index.jsx",["86"],"import React, { useEffect, useState } from 'react'\nimport GpuNode from '../GpuNode'\nimport { execShellCommand, getSystemSpecs} from '../../utils/scripts'\nimport { getImageId } from '../../database/GpuData'\nimport './style.scss'\nconst SystemSpecs = () => {\n  const [systemSpecs, setSystemSpecs] = useState(null)\n  const [isRunning, setIsRunning] = useState(false)\n\n  useEffect(() => {\n    const fetchSystemSpecs = async () => {\n      try {\n        console.log('Fetching system specs')\n       // getMacAddress()\n\n        const userData = JSON.parse(localStorage.getItem('userData'))\n        const imageId = await getImageId(userData.id)\n        console.log('Image Id: ' + imageId)\n        if (imageId) {\n          console.log('Image Id in fetchSystemSpecs: ' + imageId)\n          const status = await execShellCommand(\n            `docker ps --filter \"ancestor=${imageId}\" --format \"{{.Status}}\"`\n          )\n          console.log('Image Status in fetchSystemSpecs: ' + status)\n          if (status.split(' ')[0] === 'Up') {\n            setIsRunning(true)\n          } else {\n            setIsRunning(false)\n          }\n        }\n\n        const specs = await getSystemSpecs()\n        console.log('Specsssssss:', specs)\n        setSystemSpecs(specs)\n        console.log('Specs: ', systemSpecs)\n      } catch (error) {\n        console.error('Error retrieving system specs:', error)\n      }\n    }\n\n    fetchSystemSpecs()\n  }, [])\n\n  if (!systemSpecs) {\n    return <div className=\"text-light\">loading...</div>\n  }\n\n  return (\n    <div>\n      <hr />\n      <div className=\"card-container\">\n        <GpuNode systemSpecs={systemSpecs} isRunning={isRunning} />\n      </div>\n    </div>\n  )\n}\n\nexport default SystemSpecs\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/TopBar/index.jsx",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/GpuNode/index.jsx",["87"],"import { useState, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { Alert } from 'react-bootstrap'\nimport {\n  addGpuData,\n  updateGpuStatus,\n  checkExistingRecord\n} from '../../database/GpuData'\n//import { removeSshCredientials } from '../../database/sshData'\nimport {\n  createAndStartDocker,\n  startDockerContainer,\n  stopContainer\n} from '../../services/dockerCreation'\nimport { getContainerNameFromDb } from '../../database/sshData'\nimport { execShellCommand,getCpuID,getMacAddress } from '../../utils/scripts'\nimport { SecondaryButton, Loader } from 'qlu-20-ui-library'\nimport './style.scss'\n// const Redis = require('ioredis')\n\n//const ngrok = window.require('ngrok')\n\nlet containerName\n// let storedContainerName\n// // let imageName;\n// let client\nconst ID = uuidv4()\n\nconst IMAGE_NAME = `client_dk_${ID}`\nconst CONTAINER_IMAGE_NAME = `client_dk_${ID}`\n\nconst GpuNode = ({ systemSpecs, isRunning }) => {\n  const [errorMessage, setErrorMessage] = useState('')\n  const [isLend, setIsLend] = useState(isRunning)\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false)\n  const [isLendLoading, setIsLendLoading] = useState(false)\n \n  console.log('Running????', isRunning)\n\n  const handleLend = async () => {\n    try {\n      const macAddress = await getMacAddress();\n      const cpuId= await getCpuID();\n      console.log(\"MacAddress in GpuNode\", macAddress);\n      console.log(\"Cpu id  in GpuNode\", cpuId);\n      setIsLendLoading(true)\n      const gpu_status = 'active'\n      const gpu_index = systemSpecs['gpu'][0].index\n      const user_id = JSON.parse(localStorage.getItem('userData')).id\n      console.log('SystemSpecsAll', systemSpecs['gpu'])\n      console.log('SystemSpecs Index', systemSpecs['gpu'][0].index)\n      console.log('Container Image Name', CONTAINER_IMAGE_NAME)\n      console.log('Running? or not?:', isRunning)\n      const existingRecord = await checkExistingRecord(macAddress,cpuId,gpu_index,user_id)\n      console.log('Existing Record?', existingRecord)\n\n      containerName = CONTAINER_IMAGE_NAME\n      // imageName=IMAGE_NAME;\n      // Create a Redis client with the specified configuration\n\n      if (existingRecord==='false') {\n        console.log('Here to create the Docker Container Image')\n        if (systemSpecs) {\n          console.log('container Name:', containerName)\n          await createAndStartDocker(IMAGE_NAME, containerName)\n          const image_id = await execShellCommand(\n            `docker images -q ${IMAGE_NAME}`\n          )\n          console.log('system Specs', systemSpecs)\n          console.log('userId and imageId ', user_id, image_id)\n          console.log('gpu_status in handleLend:',gpu_status);\n          await addGpuData(systemSpecs, user_id, image_id, gpu_status, containerName)\n          console.log('Gpu Data added...in GpuNode')\n          setShowSuccessMessage(true)\n          setIsLend(true)\n          setTimeout(() => setShowSuccessMessage(false), 5000)\n        }\n      } else {\n        console.log('in elseeeeee')\n        await updateGpuStatus(user_id,macAddress,cpuId,gpu_status)\n\n        const storedContainerName = await getContainerNameFromDb(macAddress,cpuId)\n        console.log('Container name retrieved from Db:', storedContainerName)\n\n        await startDockerContainer(storedContainerName)\n        setShowSuccessMessage(true)\n        setIsLend(true)\n      }\n      setIsLendLoading(false)\n    } catch (err) {\n      setIsLendLoading(false)\n      setErrorMessage('Lending failed. Please try again. Error: ' + err)\n      setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n      console.log(err)\n    }\n  }\n\n  const handleWithdraw = async () => {\n    try {\n      const macAddress = await getMacAddress();\n      const cpuId= await getCpuID();\n      console.log(\"MacAddress in GpuNode\", macAddress);\n      console.log(\"Cpu id  in GpuNode\", cpuId);\n      setIsLendLoading(true);\n      const storedContainerName = await getContainerNameFromDb(macAddress,cpuId);\n      console.log('Container Stored Image Name', storedContainerName)\n      const containerStopped = await stopContainer(storedContainerName)\n      console.log('Container Stopped?', containerStopped)\n      //  await removeSshCredientials()\n      //  await removeGpuData()\n      //  await stopContainer(IMAGE_NAME);\n      //  await stopAndDeleteContainer(IMAGE_NAME)\n      //  await ngrok.disconnect()\n      const user_id = JSON.parse(localStorage.getItem('userData')).id\n      await updateGpuStatus(user_id,macAddress,cpuId, 'inactive')\n      setIsLend(false)\n      setIsLendLoading(false)\n    } catch (err) {\n      setIsLendLoading(false)\n      setErrorMessage(\n        'Withdrawal failed. Please try again. Error: ' + err.message\n      )\n      setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n      console.log(err)\n    }\n  }\n\n  return (\n    <>\n      {showSuccessMessage && (\n        <Alert\n          variant=\"primary\"\n          className=\"position-fixed top-0 end-0 mt-4 me-4\"\n          onClose={() => setShowSuccessMessage(false)}\n          dismissible\n        >\n          {!isLend ? 'Withdrawn success!' : 'Lending success!'}\n        </Alert>\n      )}\n      {errorMessage && (\n        <Alert\n          variant=\"danger\"\n          className=\"position-fixed top-0 end-0 mt-4 me-4\"\n          onClose={() => setErrorMessage(false)}\n          dismissible\n        >\n          {errorMessage}\n        </Alert>\n      )}\n      {/* Display GPU and system info in the card-container */}\n      {systemSpecs['gpu'] !== undefined ? (\n        systemSpecs['gpu']?.length >= 0 &&\n        systemSpecs['gpu']?.map((gpu, i) => (\n          <div key={i} className=\"gpu-card\">\n            <div className=\"title\">\n              <div className=\"left-info\">\n                <div className=\"gpu-num\">{`GPU-${i + 1}`}</div>\n                <div className=\"gpu-name\">{gpu.name}</div>\n              </div>\n\n              <div className=\"icon\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"22\"\n                  height=\"22\"\n                  viewBox=\"0 0 22 22\"\n                  fill=\"none\"\n                >\n                  <path\n                    d=\"M10.9974 15.585C10.7681 15.585 10.5805 15.7725 10.583 16.0018C10.583 16.2311 10.7706 16.4186 10.9999 16.4186C11.2291 16.4186 11.4167 16.2311 11.4167 16.0018C11.4167 15.7725 11.2291 15.585 10.9974 15.585\"\n                    stroke=\"#D5D5D5\"\n                    stroke-width=\"2.4\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M10.9974 10.583C10.7681 10.583 10.5805 10.7706 10.583 10.9998C10.583 11.2291 10.7706 11.4167 10.9999 11.4167C11.2291 11.4167 11.4167 11.2291 11.4167 10.9998C11.4167 10.7706 11.2291 10.583 10.9974 10.583\"\n                    stroke=\"#D5D5D5\"\n                    stroke-width=\"2.4\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M10.9974 5.58105C10.7681 5.58105 10.5805 5.76863 10.583 5.99789C10.583 6.22716 10.7706 6.41473 10.9999 6.41473C11.2291 6.41473 11.4167 6.22716 11.4167 5.99789C11.4167 5.76863 11.2291 5.58105 10.9974 5.58105\"\n                    stroke=\"#D5D5D5\"\n                    stroke-width=\"2.4\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                </svg>\n              </div>\n            </div>\n            <div className=\"logo\">\n              {isLend ? (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"87\"\n                  height=\"87\"\n                  viewBox=\"0 0 87 87\"\n                  fill=\"none\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M12.6875 14.5H70.6875C76.6936 14.5 81.5625 19.3689 81.5625 25.375V61.625C81.5625 67.6311 76.6936 72.5 70.6875 72.5H12.6875V14.5Z\"\n                    stroke=\"#99552F\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M12.6875 76.125V14.5C12.6875 12.498 11.0645 10.875 9.0625 10.875H5.4375\"\n                    stroke=\"#99552F\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M23.5625 29V58\"\n                    stroke=\"#99552F\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M59.8164 43.5V60.0703\"\n                    stroke=\"url(#paint0_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M45.3164 43.4989V26.9258\"\n                    stroke=\"url(#paint1_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <circle\n                    cx=\"52.5664\"\n                    cy=\"43.5\"\n                    r=\"7.25\"\n                    stroke=\"#FF8D4E\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5664 36.25H69.1366\"\n                    stroke=\"url(#paint2_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5683 50.75H35.9951\"\n                    stroke=\"url(#paint3_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.564 61.625H52.561C42.5511 61.6242 34.4371 53.5091 34.4375 43.4992C34.4379 33.4894 42.5526 25.375 52.5625 25.375C62.5724 25.375 70.6871 33.4894 70.6875 43.4992C70.6879 53.5091 62.5739 61.6242 52.564 61.625\"\n                    stroke=\"#FFBF9B\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <defs>\n                    <linearGradient\n                      id=\"paint0_linear_418_1525\"\n                      x1=\"62.5\"\n                      y1=\"52\"\n                      x2=\"57.5\"\n                      y2=\"52\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                    <linearGradient\n                      id=\"paint1_linear_418_1525\"\n                      x1=\"48\"\n                      y1=\"35.4273\"\n                      x2=\"43\"\n                      y2=\"35.4272\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                    <linearGradient\n                      id=\"paint2_linear_418_1525\"\n                      x1=\"60.8515\"\n                      y1=\"34.4375\"\n                      x2=\"60.8515\"\n                      y2=\"38.0625\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                    <linearGradient\n                      id=\"paint3_linear_418_1525\"\n                      x1=\"44.2817\"\n                      y1=\"48.9375\"\n                      x2=\"44.2817\"\n                      y2=\"52.5625\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              ) : (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"87\"\n                  height=\"87\"\n                  viewBox=\"0 0 87 87\"\n                  fill=\"none\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M12.6875 14.5H70.6875C76.6936 14.5 81.5625 19.3689 81.5625 25.375V61.625C81.5625 67.6311 76.6936 72.5 70.6875 72.5H12.6875V14.5Z\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M12.6875 76.125V14.5C12.6875 12.498 11.0645 10.875 9.0625 10.875H5.4375\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M23.5625 29V58\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M45.3164 43.4989V26.9258\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M59.8164 43.5V60.0703\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5664 36.25H69.1366\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5683 50.75H35.9951\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <circle\n                    cx=\"52.5664\"\n                    cy=\"43.5\"\n                    r=\"7.25\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.564 61.625H52.561C42.5511 61.6242 34.4371 53.5091 34.4375 43.4992C34.4379 33.4894 42.5526 25.375 52.5625 25.375C62.5724 25.375 70.6871 33.4894 70.6875 43.4992C70.6879 53.5091 62.5739 61.6242 52.564 61.625\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                </svg>\n              )}\n            </div>\n            <div className=\"system-info\">\n              <div className=\"info\">\n                <span className=\"name\">VRAM</span>\n                <span className=\"value\">{`${(\n                  (gpu.used + gpu.total) /\n                  1024\n                ).toFixed(2)} GB`}</span>\n              </div>\n              <div className=\"info\">\n                <span className=\"name\">RAM</span>\n                <span className=\"value\">{`${systemSpecs['ram'].total.toFixed(\n                  2\n                )} GB`}</span>\n              </div>\n              <div className=\"info\">\n                <span className=\"name\">CPU USAGE</span>\n                <span className=\"value\">{systemSpecs['cpu']}</span>\n              </div>\n            </div>\n            <div className=\"button\">\n              {console.log(\"isLendLoading....:\",isLendLoading)}\n              {!isLend ? (\n                <SecondaryButton\n                  text={isLendLoading ? <Loader /> : 'Lend GPU'} // Conditional rendering\n                  onClick={handleLend}\n                  isDisabled={isLendLoading} // Disable button while loading\n                />\n              ) : (\n                <SecondaryButton\n                  text={isLendLoading ? <Loader /> : 'Stop Lending'} // Conditional rendering\n                  onClick={handleWithdraw}\n                  isDisabled={isLendLoading} // Disable button while loading\n                />\n              )}\n            </div>\n          </div>\n        ))\n      ) : (\n        <h3>No GPU</h3>\n      )}\n    </>\n  )\n}\n\nexport default GpuNode\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/services/dockerCreation.js",["88","89","90","91"],"//import {getContainerNameFromDb} from '../database/sshData';\n//import {getCpuID,getMacAddress } from '../utils/scripts';\nconst Docker = window.require('dockerode')\nconst { exec } = window.require('child_process')\nconst path = require('path')\nconst { app } = window.require('electron').remote\nconst appPath = app.getAppPath()\n//const docker = new Docker()\n\n// const redis = window.require('ioredis')\n// const redisHost = 'localhost' // Replace with the hostname or IP address of your Redis server\n// const redisPort = 6379 // Replace with the port number your Redis server is listening on\n\n// const client = redis.createClient({\n//   host: redisHost,\n//   port: redisPort,\n//   db: 1\n// })\n\n// Test the Redis connection\n// client.on('connect', () => {\n//   console.log('Connected to Redis server')\n// })\n\n// client.on('error', err => {\n//   console.error('Error connecting to Redis:', err)\n// })\n\nconst execShellCommand = cmd => {\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stdout || stderr)\n      }\n    })\n  })\n}\n\n// // Function to set the container name in Redis\n// export const setContainerNameInRedis = containerName => {\n//   console.log('Here to set the container name in Redis')\n//   return new Promise((resolve, reject) => {\n//     client.set('containerName', containerName, (err, reply) => {\n//       console.log('Here to set the container name in Redis2222222222222')\n//       if (err) {\n//         console.error('Error setting container name in Redis:', err)\n//         reject(err)\n//       } else {\n//         console.log('Container name set in Redis:', reply)\n//         resolve(reply)\n//       }\n//     })\n//   })\n// }\n\n// // Function to get the container name from Redis\n// export const getContainerNameFromRedis = () => {\n//   return new Promise((resolve, reject) => {\n//     client.get('containerName', (err, reply) => {\n//       if (err) {\n//         console.error('Error getting container name from Redis:', err)\n//         reject(err)\n//       } else {\n//         console.log('Container name retrieved from Redis:', reply)\n//         resolve(reply)\n//       }\n//     })\n//   })\n// }\n\nexport async function createAndStartDocker(imageName, container_image_name) {\n  const PORT = 2222\n  // const currentDir = path.dirname(require.main.filename)\n  const currentDir = __dirname\n\n  console.log('current_directory:', currentDir)\n\n  console.log('appPath: ', appPath)\n  console.log('app', app)\n  const unpackedPath = path.join(path.dirname(appPath), 'app.asar.unpacked')\n  console.log('unpackedPath: ', unpackedPath)\n  const dockerfilePath = path.join(unpackedPath, 'src', 'server', 'Dockerfile');\n  const contextPath = path.join(unpackedPath, 'src', 'server')\n  \n  // const dockerfilePath =\n  //   '/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/server/Dockerfile'\n\n  const buildContext = path.join(currentDir, 'src')\n\n  console.log('dockerfilePath:', dockerfilePath)\n  console.log('buildContext:', buildContext)\n\n  console.log('Container Name: ', container_image_name)\n\n  try {\n    console.log(\"Running the new container in createAndStartDocker\");\n    // const checkExistingImages = await execShellCommand('docker images -q')\n    // console.log('checkExistingImages:', checkExistingImages)\n    // const checkExistingContainers = await execShellCommand('docker ps -a -q')\n    // console.log('checkExistingContainers:', checkExistingContainers)\n\n         await stopContainerByPort(PORT)\n\n    //   if(checkExistingImages && checkExistingContainers){\n    //     console.log('Stopping all containers...');\n    //     await execShellCommand('docker stop $(docker ps -aq)');\n\n    //     console.log('Removing all containers...');\n    //     await execShellCommand('docker rm $(docker ps -aq)');\n\n    //     console.log('Removing all images...');\n    //     await execShellCommand('docker rmi -f $(docker images -q)');\n\n    //     console.log('Creating Docker image...')\n    //   }\n    //  else{\n    //     console.log(\"No images found\");\n    //  }\n\n    await execShellCommand(\n      // `docker build --rm -t ${imageName} -f ${dockerfilePath} .`\n      // `docker build --rm -t ${imageName} -f ${dockerfilePath}  .`\n      `docker build --rm -t ${imageName} -f ${dockerfilePath} ${contextPath}`\n    )\n  } catch (error) {\n    alert(error)\n    console.error('Error Creating Docker image:', error)\n    throw 'Error Creating Docker image'\n  }\n\n  console.log('Running Docker container...')\n  await runDockerContainer(imageName);\n\n}\nexport async function runDockerContainer(imageName) {\n    try {\n     await waitForContainerToStart(imageName)\n    execShellCommand(\n      // `docker run -d --privileged --name ${imageName} ${imageName} -p 2222:22 docker:dind`\n      `docker run --privileged --gpus all -d -p 2222:22 --name ${imageName} ${imageName} `\n\n      // `docker run -d -p 2222:22 --name ${imageName} ${imageName}`\n      // `docker run -p ${PORT}:22 --name ${container_image_name} ${imageName}:latest`\n    )\n    console.log('docker container run.....')\n   \n  } catch (error) {\n    alert(error)\n    console.error('Error running Docker container:', error)\n    throw 'Error running Docker container'\n  }\n}\n\nexport async function deleteContainer(imageName){\n  try {\n    console.log('Deleting Docker container...')\n    await execShellCommand(`docker rm -f ${imageName}`)\n    console.log(`Container ${imageName} deleted successfully.`)\n  } catch (error) {\n    console.error(`Error deleting container: ${error.message}`)\n    // Handle the error appropriately\n  }\n}\n\nexport async function stopAndDeleteContainer(imageName) {\n  // Stop the container\n  const stopCommand = `docker stop ${imageName}`\n  execShellCommand(stopCommand, (stopError, stopStdout, stopStderr) => {\n    if (stopError) {\n      console.error(`Error stopping the container: ${imageName}`)\n      console.error(stopStderr)\n    } else {\n      console.log(`Container ${imageName} stopped successfully.`)\n\n      // Delete the container\n      const deleteContainerCommand = `docker rm ${imageName}`\n      execShellCommand(\n        deleteContainerCommand,\n        (\n          deleteContainerError,\n          deleteContainerStdout,\n          deleteContainerStderr\n        ) => {\n          if (deleteContainerError) {\n            console.error(`Error deleting the container: ${imageName}`)\n            console.error(deleteContainerStderr)\n          } else {\n            console.log(`Container ${imageName} deleted successfully.`)\n\n            // Now that the container is deleted, you can delete the image\n            const deleteImageCommand = `docker rmi ${imageName}`\n            execShellCommand(\n              deleteImageCommand,\n              (deleteImageError, deleteImageStdout, deleteImageStderr) => {\n                if (deleteImageError) {\n                  console.error(`Error deleting the image: ${imageName}`)\n                  console.error(deleteImageStderr)\n                } else {\n                  console.log(`Image ${imageName} deleted successfully.`)\n                }\n              }\n            )\n          }\n        }\n      )\n    }\n  })\n}\n\nexport async function stopContainer(containerName) {\n  try {\n    // Check if the container is already stopped\n    const isRunning = await isContainerRunning(containerName);\n    console.log('Is Running in stop Container', isRunning)\n    if (isRunning) {\n      // const containerId = await execShellCommand(\n      //   `docker ps -aqf \"name=${containerName}\"`\n      // )\n     //console.log('Container Id is: ', containerId)\n      console.log('Stopping the container in Stop Container:', containerName)\n     \n   //   console.log(\"Container Name trimmed: \", containerName)\n      // if (originalName !==  containerName2) {\n      //   console.log('Extra spaces were found and removed.')\n      // }\n      await execShellCommand(`docker stop ${containerName}`)\n      console.log(`Container ${containerName} stopped successfully.`)\n      await deleteContainer(containerName)\n    } else {\n      console.log(`Container ${containerName} is already stopped.`)\n    }\n  } catch (error) {\n    console.error(`Error stopping container: ${error.message}`)\n    // Handle the error appropriately\n  }\n}\n\nexport async function containerExistsWithName(containerName) {\n  try {\n    const { stdout, stderr } = await execShellCommand(\n      `docker ps -a --filter \"name=${containerName}\" --format \"{{.ID}}\"`\n    )\n    //  const containerId = stdout.toString().trim(); // Convert stdout to string and trim whitespace\n    console.log('Containerr Exists Container ID: ', stdout)\n    return stdout !== undefined // If there is any output, the container exists\n  } catch (error) {\n    console.error(`Error checking container existence: ${error.message}`)\n    return false // Handle the error appropriately\n  }\n}\n\nexport async function isContainerRunning(containerName) {\n  try {\n    console.log(\"Container Name in isContainerRunning\",containerName);\n    const stdout = await execShellCommand(\n      `docker inspect --format='{{.State.Status}}' ${containerName}`\n    );   \n    // if (stderr) {\n    //   console.error(`Error checking container status: ${stderr}`);\n    //   return false;\n    // }\n    console.log('Container Status:',stdout);\n    const containerStatus = stdout.trim();\n    console.log(`Container Status: ${containerStatus}`);\n  \n    if (containerStatus.toLowerCase() === 'running') {\n      console.log('Container Status: ' + containerStatus)\n      return true\n    } else {\n      console.log('Container Status: ' + containerStatus)\n      return false\n    }\n  } catch (error) {\n    console.error(`Error checking container status: ${error.message}`)\n    return false // Handle the error appropriately\n  }\n}\n\nexport async function startContainer(containerName) {\n  try {\n    await runDockerContainer(containerName);\n   // await execShellCommand(`docker start ${containerName}`)\n    console.log(`Container ${containerName} started successfully.`)\n  } catch (error) {\n    console.error(`Error starting container: ${error.message}`)\n    // Handle the error appropriately\n  }\n}\n\nexport async function startDockerContainer(containerName) {\n  try {\n    await runDockerContainer(containerName);\n    await execShellCommand(\n      `docker start ${containerName}`\n    )\n    console.log(`Container ${containerName} started successfully.`)\n  } catch (error) {\n    console.error(`Error starting container: ${error.message}`)\n    // Handle the error appropriately\n  }\n}\n\n// export async function stopContainerByPort(port) {\n//   try {\n//     console.log('Here to stop container by port')\n//     const containers = await docker.listContainers({ all: true })\n//     console.log('Container: ', containers)\n\n//     for (const containerInfo of containers) {\n//       const container = docker.getContainer(containerInfo.Id)\n//       console.log(\"Container's Id: \", containerInfo.Id)\n//       console.log('Container by id: ', container)\n//       const containerInspect = await container.inspect()\n//       console.log('Container Inspect: ', containerInspect)\n//       // Check if the container is already stopped\n//       if (containerInspect.State.Status !== 'exited') {\n//         // Check if the container is running and exposing the specified port\n//         const containerPorts = containerInspect.NetworkSettings.Ports\n//         console.log('Container Ports:', containerPorts)\n//         console.log('Container Ports tcp:', containerPorts[`${port}/tcp`])\n//         for (const mapping of Object.values(containerPorts)) {\n//           if (mapping && mapping.length > 0) {\n//             for (const portMapping of mapping) {\n//               console.log('Port Mapping: ', portMapping)\n//               if (\n//                 containerInspect.State.Running &&\n//                 containerPorts &&\n//                 portMapping.HostPort === port.toString()\n//               ) {\n//                 console.log(`Stopping container ${containerInspect.Name}...`)\n//                 await container.stop()\n//                 // await stopAndDeleteContainer(containerInspect.Name);\n//                 console.log(`Container ${containerInspect.Name} stopped.`)\n//               }\n//             }\n//           }\n//         }\n//       } else {\n//         console.log(`Container ${containerInspect.Name} is already stopped.`)\n//       }\n//     }\n//   } catch (error) {\n//     console.error('Error stopping container:', error)\n//   }\n// }\n\nasync function waitForContainerToStart(\n  containerName,\n  maxAttempts = 8,\n  interval = 2000\n) {\n  let attempts = 0\n  while (attempts < maxAttempts) {\n    // const isRunning = await isContainerRunning(containerName)\n    // if (isRunning) {\n    //   console.log(`Container ${containerName} is running.`)\n    //   return\n    // }\n    attempts++\n    console.log(\n      `Waiting for ${containerName} to start (Attempt ${attempts} of ${maxAttempts})...`\n    )\n    await new Promise(resolve => setTimeout(resolve, interval))\n   }\n  // console.error(\n  //   `Container ${containerName} did not start after ${maxAttempts} attempts.`\n  // )\n}\n\n// export async function stopContainerByPort(port) {\n//   try {\n//     const macAddress = await getMacAddress();\n//     const cpuId= await getCpuID();\n//    // const storedContainerName = await getContainerNameFromDb(macAddress,cpuId)\n//    // console.log('Container name retrieved from Db in stopContainerByPort:', storedContainerName)\n//     console.log('Here to stop container by port');\n//     const containers = await docker.listContainers({ all: true });\n//     console.log(\"Containers List in stopContainerByPort:\", containers);\n//     // Use Promise.all to stop containers concurrently\n//     const promises = containers.map(async (containerInfo) => {\n//       console.log(\"Conatiners Info:\",containerInfo);\n//       const container = docker.getContainer(containerInfo.Id);\n//       console.log(\"Container from docker in stopContainerByPort:\", container)\n//       console.log(\"Container's Id: \", containerInfo.Id);\n      \n//       const containerInspect = await container.inspect();\n//       console.log('Container Inspect: ', containerInspect);\n\n//       if (containerInspect.State.Status !== 'exited') {\n//         const containerPorts = containerInspect.NetworkSettings.Ports;\n//         console.log('Container Ports:', containerPorts);\n//         console.log('Container Ports tcp:', containerPorts[`${port}/tcp`]);\n//         const containerName = containerInspect.Name.slice(1);\n//         for (const mapping of Object.values(containerPorts)) {\n//           if (mapping && mapping.length > 0) {\n//             for (const portMapping of mapping) {\n//               console.log('Port Mapping: ', portMapping);\n//               if (\n//                 containerInspect.State.Running &&\n//                 portMapping.HostPort === port.toString()\n//              //   && containerName !== storedContainerName\n//               ) {\n//                 console.log(`Stopping container ${containerInspect.Name}...`);\n//                 alert(\"There is already a container running on port 2222 stop it and then retry lending.\")\n//                 await stopContainerByPort(port);\n//                 console.log(`Container ${containerInspect.Name} stopped.`);\n//               }\n//             }\n//           }\n//         }\n//       } \n//       else {\n//         console.log(`Container ${containerInspect.Name} is already stopped.`);\n//       }\n//     });\n\n//     // Wait for all containers to be processed\n//     await Promise.all(promises);\n//   } catch (error) {\n//     console.error('Error stopping containers:', error);\n//   }\n// }\n\n\n\nasync function stopContainerByPort(port) {\n  try {\n    // Use the 'docker ps' command to list running containers and filter by port\n    \n    const listContainersCommand = `docker ps --filter \"publish=${port}\" --format \"{{.ID}}\"`;\n    const runningContainersOnPort = await execShellCommand(listContainersCommand);\n    console.log(\"The running container:\",runningContainersOnPort)\n\n    // if (stderr) {\n    //   console.error(`Error listing containers: ${stderr}`);\n    //   return;\n    // }\n\n    if (runningContainersOnPort) {\n   //   const containerIds = runningContainersOnPort.trim().split('\\n');\n      alert(\"There is already a container running on port 2222 stop it and then retry lending.\")\n      await stopContainerByPort(port);\n\n      // for (const containerId of containerIds) {\n      //   // Stop each container\n      //   const stopCommand = `docker stop ${containerId}`;\n      //   const stopResult = await execShellCommand(stopCommand);\n\n      //   if (stopResult instanceof Error) {\n      //     console.error(`Error stopping container ${containerId}: ${stopResult.message}`);\n      //   } else {\n      //     console.log(`Container ${containerId} stopped successfully.`);\n      //   }\n      // }\n\n    } else {\n      console.log(`No containers found running on port ${port}.`);\n    }\n  } catch (error) {\n    console.error('Error stopping containers:', error);\n  }\n}\n\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":29,"column":10,"nodeType":"98","messageId":"99","endLine":29,"endColumn":16},{"ruleId":"96","severity":1,"message":"100","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":23},{"ruleId":"96","severity":1,"message":"101","line":6,"column":10,"nodeType":"98","messageId":"99","endLine":6,"endColumn":31},{"ruleId":"96","severity":1,"message":"102","line":7,"column":10,"nodeType":"98","messageId":"99","endLine":7,"endColumn":26},{"ruleId":"96","severity":1,"message":"103","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":14},{"ruleId":"96","severity":1,"message":"104","line":12,"column":9,"nodeType":"98","messageId":"99","endLine":12,"endColumn":15},{"ruleId":"96","severity":1,"message":"105","line":23,"column":7,"nodeType":"98","messageId":"99","endLine":23,"endColumn":23},{"ruleId":"96","severity":1,"message":"106","line":54,"column":11,"nodeType":"98","messageId":"99","endLine":54,"endColumn":16},{"ruleId":"96","severity":1,"message":"103","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":14},{"ruleId":"107","severity":1,"message":"108","line":37,"column":7,"nodeType":"109","messageId":"110","endLine":37,"endColumn":86},{"ruleId":"111","severity":1,"message":"112","line":42,"column":6,"nodeType":"113","endLine":42,"endColumn":8,"suggestions":"114"},{"ruleId":"96","severity":1,"message":"115","line":1,"column":20,"nodeType":"98","messageId":"99","endLine":1,"endColumn":29},{"ruleId":"96","severity":1,"message":"116","line":3,"column":7,"nodeType":"98","messageId":"99","endLine":3,"endColumn":13},{"ruleId":"107","severity":1,"message":"108","line":130,"column":5,"nodeType":"109","messageId":"110","endLine":130,"endColumn":40},{"ruleId":"107","severity":1,"message":"108","line":152,"column":5,"nodeType":"109","messageId":"110","endLine":152,"endColumn":43},{"ruleId":"96","severity":1,"message":"117","line":242,"column":21,"nodeType":"98","messageId":"99","endLine":242,"endColumn":27},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'removeGpuData' is defined but never used.","'removeSshCredientials' is defined but never used.","'execShellCommand' is defined but never used.","'pool' is defined but never used.","'dialog' is assigned a value but never used.","'execShellCommand' is assigned a value but never used.","'login' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'systemSpecs'. Either include it or remove the dependency array.","ArrayExpression",["120"],"'useEffect' is defined but never used.","'Docker' is assigned a value but never used.","'stderr' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [systemSpecs]",{"range":"123","text":"124"},[1420,1422],"[systemSpecs]"]