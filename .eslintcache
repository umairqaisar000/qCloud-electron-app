[{"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/index.js":"1","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/App.js":"2","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/Context/AuthContext.js":"3","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/HomePage/index.jsx":"4","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage/index.jsx":"5","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/SignupPage/index.jsx":"6","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/PoolConnection/index.js":"7","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/GpuData/index.js":"8","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/sshData/index.js":"9","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/SystemSpecs/index.jsx":"10","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/scripts.js":"11","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/GpuNode/index.jsx":"12","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/services/dockerCreation.js":"13","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage2/index.jsx":"14","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/TopBar/index.jsx":"15","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/Card/index.jsx":"16","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/config.js":"17","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/server/index.js":"18"},{"size":306,"mtime":1691583943587,"results":"19","hashOfConfig":"20"},{"size":640,"mtime":1692958631304,"results":"21","hashOfConfig":"20"},{"size":1113,"mtime":1692787662118,"results":"22","hashOfConfig":"20"},{"size":2720,"mtime":1692154492431,"results":"23","hashOfConfig":"20"},{"size":6914,"mtime":1693199691507,"results":"24","hashOfConfig":"20"},{"size":4661,"mtime":1691582911246,"results":"25","hashOfConfig":"20"},{"size":598,"mtime":1691576510432,"results":"26","hashOfConfig":"20"},{"size":13163,"mtime":1694072857420,"results":"27","hashOfConfig":"20"},{"size":2926,"mtime":1692873316177,"results":"28","hashOfConfig":"20"},{"size":1595,"mtime":1694073750765,"results":"29","hashOfConfig":"20"},{"size":2940,"mtime":1694079089076,"results":"30","hashOfConfig":"20"},{"size":15081,"mtime":1694073046127,"results":"31","hashOfConfig":"20"},{"size":2721,"mtime":1693895140822,"results":"32","hashOfConfig":"20"},{"size":3651,"mtime":1691591277654,"results":"33","hashOfConfig":"34"},{"size":1645,"mtime":1691648372125,"results":"35","hashOfConfig":"20"},{"size":145,"mtime":1691666529448,"results":"36","hashOfConfig":"34"},{"size":106,"mtime":1693925029027,"results":"37","hashOfConfig":"20"},{"size":6234,"mtime":1691576510432,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"g0q7tn",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"1hdgfwb",{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"83"},"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/index.js",[],["84","85"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/App.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/Context/AuthContext.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/HomePage/index.jsx",["86","87"],"import React, { useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport SystemSpecs from '../../components/SystemSpecs'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { removeGpuData,updateGpuStatus } from '../../database/GpuData'\nimport { removeSshCredientials } from '../../database/sshData'\nimport TopBar from '../../components/TopBar'\nimport { SecondaryButton } from 'qlu-20-ui-library'\nimport './style.scss'\nconst ngrok = window.require('ngrok')\n\nconst HomePage = () => {\n  const navigate = useNavigate()\n  const { logout } = useContext(AuthContext)\n\n  // const handleWithdraw = async () => {\n  //   try {\n  //     await removeSshCredientials()\n  //     await removeGpuData()\n  //     await stopAndDeleteContainer(IMAGE_NAME)\n  //     await ngrok.disconnect()\n  //     setIsLend(false)\n  //   } catch (err) {\n  //     setErrorMessage(\n  //       'Withdrawal failed. Please try again. Error: ' + err.message\n  //     )\n  //     setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n  //     console.log(err)\n  //   }\n  // }\n\n  const handleLogout = async () => {\n    \n    // removeSshCredientials()\n    // removeGpuData()\n        const user_id = JSON.parse(localStorage.getItem('userData')).id\n        console.log(\"User_idddddddd\",user_id);\n        await updateGpuStatus(user_id, 'disconnected'); // Update gpu_status to 'active'\n      \n        logout()\n    ngrok.disconnect()\n    navigate('/')\n  }\n\n  return (\n    <>\n      <TopBar />\n      <div className=\"main-content\">\n      <div className=\"gpu-bar\">\n        <div className=\"active-gpus\">\n          <div className=\"text\">\n          Active Gpu's\n          </div>\n          \n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"87\"\n            height=\"2\"\n            viewBox=\"0 0 87 2\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M1 1H86\"\n              stroke=\"#FF8D4E\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n        <div className=\"total-gpus\">\n          <div className=\"text\">Total Gpus</div>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"87\"\n            height=\"2\"\n            viewBox=\"0 0 87 2\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M1 1H86\"\n              stroke=\"#FF8D4E\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n        \n      </div>\n      <SystemSpecs />\n      </div>\n    <div className=\"logout-button\">\n    <SecondaryButton text='Logout' onClick={handleLogout}/>\n    </div>\n \n    </>\n  )\n}\n\nexport default HomePage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage/index.jsx",["88","89"],"import React, { useState, useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { pool } from '../../database/PoolConnection'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.scss'\nimport * as Yup from 'yup'\nimport { AuthNavBar,InputField, Loader} from 'qlu-20-ui-library'\nconst config = require('../../utils/config')\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const navigate = useNavigate()\n  const { login } = useContext(AuthContext)\n  const [emailError, setEmailError] = useState('')\n  const [passwordError, setPasswordError] = useState('')\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    // setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleLogin = async () => {\n    setEmailError('')\n    setPasswordError('')\n  \n    if (!email && !password) {\n      setEmailError('Email is required')\n\n      setPasswordError('Password is required')\n      return\n    }\n    if (!email) {\n      setEmailError('Email is required')\n      return\n    }\n\n    // if (!isEmailValid(email)) {\n    //   setEmailError(\"Invalid email format\");\n    //   return;\n    // }\n\n    if (!password) {\n      setPasswordError('Password is required')\n      return\n    }\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message\n              return acc\n            },\n            {}\n          )\n          // setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n\n          Object.values(validationErrorsMap).forEach(errorMsg => {\n            toast.error(errorMsg)\n          })\n        }\n        return\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const query = 'SELECT * FROM members WHERE email = $1'\n        const result = await client.query(query, [email])\n\n        if (result.rowCount === 1) {\n          const storedPassword = result.rows[0].password // Assuming the password column is named \"password\" in the database\n          console.log('storedPassword:', storedPassword)\n          // Compare the stored password with the entered password\n          const passwordMatch = await bcrypt.compare(password, storedPassword)\n\n          if (passwordMatch) {\n            console.log('User authenticated')\n            //   setIsAuthenticated(true)\n            //   localStorage.setItem('userData', email);\n            login(result.rows[0].id,\n              result.rows[0].email,\n              result.rows[0].org_id)\n            navigate('/homepage')\n          } else {\n            console.log('Invalid email or password')\n          }\n\n          client.release()\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const LoginHandler = async (email, password) => {\n    setLoading(true);\n    setEmailError('');\n    setPasswordError('');\n\n    try {\n      await validationSchema.validate({ email, password }, { abortEarly: false });\n\n      const response = await fetch(config.apiUrl + '/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      }).then((response) => response.json());\n\n      if (response.success === true) {\n        localStorage.setItem('userData', JSON.stringify(response.user));\n        localStorage.setItem('xhqr', JSON.stringify(response.user?.xhqr));\n        navigate('/homepage');\n      } else {\n        toast.error('Incorrect email or password. Please re-enter.');\n      }\n    } catch (validationError) {\n      // Handle Yup validation errors\n      validationError.inner.forEach((error) => {\n        if (error.path === 'email') {\n          setEmailError(error.message);\n        } else if (error.path === 'password') {\n          setPasswordError(error.message);\n        }\n        toast.error(error.message);\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  return (\n    <div className=\"login-page\">\n      <div className=\"top_nav_bar\">\n        <AuthNavBar\n        text=\"Don't have an account?\"\n        textColor=\"gray\"\n        buttonText=\"Sign up\"\n        buttonColorVaraint=\"primaryOrangeBorderAndText\"\n        ></AuthNavBar>\n      </div>\n      <div className=\"login-container\">\n      <h3>Login</h3>\n        <div className=\"login-details\">\n          <div className=\"email\">\n          <label className=\"email\">WORK EMAIL</label>\n          <InputField\n              id=\"email\"\n              value={email}\n              onChangeHandler={e => setEmail(e.target.value)}\n              placeholder='Enter your email address'\n              required\n            />\n             {emailError && <p className=\"error-message\">{emailError}</p>}\n          </div>\n          <div className=\"pass\">\n          <label htmlFor=\"\" className=\"password\">\n              PASSWORD\n            </label>\n            <InputField\n              type=\"password\"\n              value={password}\n              placeholder='Enter your password'\n              onChangeHandler={e => setPassword(e.target.value)}\n              required\n            />\n            {passwordError && <p className=\"error-message\">{passwordError}</p>}\n          </div>\n          <div className=\"button\">\n          <button\n            type=\"submit\"\n            className=\"primaryButton\"\n            onClick={() => LoginHandler(email,password)}\n            disabled={loading}\n          >\n           {loading ? <Loader/> : 'Login'}\n          </button>\n        </div>\n        </div>\n      </div>\n      <ToastContainer position=\"top-right\" autoClose={3000} />\n    </div>\n\n   \n  )\n}\n\nexport default LoginPage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/SignupPage/index.jsx",["90"],"import React, { useState } from 'react'\nimport { pool } from '../../database/PoolConnection'\nimport { Modal, Button } from 'react-bootstrap'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.css' // Import custom CSS file for Signup component styling\nimport * as Yup from 'yup'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst SignupPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showModal, setShowModal] = useState(false) // State to control the modal visibility\n  const [errors, setErrors] = useState({ email: '', password: '' })\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleSignup = async () => {\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message\n              return acc\n            },\n            {}\n          )\n          setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n\n          Object.values(validationErrorsMap).forEach(errorMsg => {\n            toast.error(errorMsg)\n          })\n        }\n        return\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const saltRounds = 10\n        const hashedPassword = await bcrypt.hash(password, saltRounds)\n        const query =\n          'INSERT INTO client_user (email, password) VALUES ($1, $2)'\n        await client.query(query, [email, hashedPassword])\n        console.log('User registered')\n        client.release()\n        setShowModal(true) // Show the success modal\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false) // Close the modal\n  }\n\n  return (\n    <div className=\"signup-container\">\n      <ToastContainer /> \n      <form className=\"signup-form\">\n        <h2 className=\"signup-heading\">Signup</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"signup-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"signup-input\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"signup-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"signup-input\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Enter your password\"\n            value={password}\n            onChange={handleInputChange}\n          />\n        </div>\n        <button type=\"button\" className=\"signup-button\" onClick={handleSignup}>\n          Signup\n        </button>\n        <a href=\"/\" className=\"login-link\">\n          Already have an account? Login\n        </a>\n\n        {/* Success Modal */}\n        <Modal show={showModal} onHide={handleCloseModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Success</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            User registration successful. You can now log in with your\n            credentials.\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleCloseModal}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </form>\n    </div>\n  )\n}\n\nexport default SignupPage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/PoolConnection/index.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/GpuData/index.js",["91","92","93","94"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/sshData/index.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/SystemSpecs/index.jsx",["95"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/scripts.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/GpuNode/index.jsx",["96","97","98","99","100"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/services/dockerCreation.js",["101","102","103","104"],"const Docker = window.require('dockerode')\nconst { exec } = window.require('child_process')\nconst path = require('path');\n\nconst docker = new Docker()\n\nconst execShellCommand = cmd => {\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stdout || stderr)\n      }\n    })\n  })\n}\n\nexport async function createAndStartDocker(imageName, container_image_name) {\n  const PORT = 2222\n  const currentDir = __dirname;\n  console.log(\"current_directory:\", currentDir);\n  const dockerfilePath = path.join(currentDir, 'src', 'server', 'Dockerfile');\n  console.log(\"dockerfilePath:\", dockerfilePath);\n  console.log('Creating Docker image...')\n  try {\n    await execShellCommand(\n      `docker build --rm -t ${imageName} -f ${dockerfilePath}  .`\n    )\n  } catch (error) {\n    console.error('Error Creating Docker image:', error)\n    throw 'Error Creating Docker image'\n  }\n\n  console.log('Running Docker container...')\n  try {\n    execShellCommand(\n      `docker run -d -p 2222:22 --name ${imageName} ${imageName}`\n      // `docker run -p ${PORT}:22 --name ${container_image_name} ${imageName}:latest`\n    )\n  } catch (error) {\n    console.error('Error running Docker container:', error)\n    throw 'Error running Docker container'\n  }\n}\n\n\nexport async function stopAndDeleteContainer(imageName) {\n  // Stop the container\n  const stopCommand = `docker stop ${imageName}`;\n  exec(stopCommand, (stopError, stopStdout, stopStderr) => {\n    if (stopError) {\n      console.error(`Error stopping the container: ${imageName}`);\n      console.error(stopStderr);\n    } else {\n      console.log(`Container ${imageName} stopped successfully.`);\n\n      // Delete the container\n      const deleteContainerCommand = `docker rm ${imageName}`;\n      exec(deleteContainerCommand, (deleteContainerError, deleteContainerStdout, deleteContainerStderr) => {\n        if (deleteContainerError) {\n          console.error(`Error deleting the container: ${imageName}`);\n          console.error(deleteContainerStderr);\n        } else {\n          console.log(`Container ${imageName} deleted successfully.`);\n\n          // Now that the container is deleted, you can delete the image\n          const deleteImageCommand = `docker rmi ${imageName}`;\n          exec(deleteImageCommand, (deleteImageError, deleteImageStdout, deleteImageStderr) => {\n            if (deleteImageError) {\n              console.error(`Error deleting the image: ${imageName}`);\n              console.error(deleteImageStderr);\n            } else {\n              console.log(`Image ${imageName} deleted successfully.`);\n            }\n          });\n        }\n      });\n    }\n  });\n}\n\n\n\n\n\n\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage2/index.jsx",["105","106","107","108"],"import { useState } from 'react'\nimport './style.scss'\nimport {\n  AuthNavBar,\n  ClickableText,\n  InputField,\n  PrimaryButton\n} from 'qlu-20-ui-library'\n\n//import HomePage from \"../HomePage/index.jsx\";\nimport { useNavigate, Link } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n//import { setUserData } from \"../../reducers/userSlice\";\n//import { isEmailValid } from \"../../../utils\";\n\nfunction Login() {\n  //const SERVER_URL = import.meta.env.VITE_APP_SERVER_URL;\n  const [email, setEmail] = useState('')\n  const dispatch = useDispatch()\n  const [password, setPassword] = useState('')\n  const [emailError, setEmailError] = useState('')\n  const [passwordError, setPasswordError] = useState('')\n  const navigate = useNavigate()\n\n  const loginHandler = async () => {\n    setEmailError('')\n    setPasswordError('')\n\n    if (!email && !password) {\n      setEmailError('Email is required')\n\n      setPasswordError('Password is required')\n      return\n    }\n    if (!email) {\n      setEmailError('Email is required')\n      return\n    }\n\n    // if (!isEmailValid(email)) {\n    //   setEmailError(\"Invalid email format\");\n    //   return;\n    // }\n\n    if (!password) {\n      setPasswordError('Password is required')\n      return\n    }\n\n    const data = {\n      email,\n      password\n    }\n    // dispatch(logIn(data));\n\n    try {\n      const response = await fetch('auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n      }).then(response => response.json())\n      console.log(response)\n      if (response.success === true) {\n        console.log('Resonse-user', response.user)\n        // dispatch(setUserData(response.user));\n        localStorage.setItem('xhqr', JSON.stringify(response.user?.xhqr))\n        navigate('/')\n\n        //  setVerificationStatus(true);\n      } else {\n        navigate('/UnverifiedPage')\n      }\n    } catch (error) {\n      console.error('Error verifying link:', error)\n    }\n  }\n\n  return (\n    <div className=\"login_page\">\n      <div className=\"auth_nav_bar\">\n        <AuthNavBar\n          text=\"Don't have an account\"\n          textColor=\"gray\"\n          buttonText=\"Sign up\"\n          buttonColorVaraint=\"primaryOrangeBorderAndText\"\n          buttonOnClick={() => {\n            navigate('/signup')\n          }}\n          textOnClick={() => {}}\n        />\n      </div>\n\n      <div className=\"login_container\">\n        <h3>Welcome Back!</h3>\n        <div className=\"login_details\">\n          <div className=\"email\">\n            <label className=\"email\">Work Email</label>\n            <InputField\n              id=\"email\"\n              value={email}\n              onChangeHandler={e => setEmail(e.target.value)}\n              required\n            />\n            {emailError && <p className=\"error-message\">{emailError}</p>}\n          </div>\n          <div className=\"pass\">\n            <label htmlFor=\"\" className=\"password\">\n              PASSWORD\n            </label>\n            <InputField\n              type=\"password\"\n              value={password}\n              onChangeHandler={e => setPassword(e.target.value)}\n              required\n            />\n            {passwordError && <p className=\"error-message\">{passwordError}</p>}\n          </div>\n          <Link to=\"/forgot-password\">Forgot Password</Link>\n        </div>\n        <div className=\"button\">\n          <button\n            type=\"submit\"\n            className=\"primaryButton\"\n            onClick={loginHandler}\n          >\n            Login\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n",["109","110"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/TopBar/index.jsx",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/Card/index.jsx",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/config.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/server/index.js",["111"],"require(\"dotenv\").config();\nconst fs = require(\"fs\");\nconst http = require(\"http\");\n// const express = require(\"express\");\nconst socketIO = require(\"socket.io\");\nconst { v4: uuidv4 } = require(\"uuid\");\nconst socketIOP2P = require(\"socket.io-p2p-server\").Server;\n// const cors = require(\"cors\");\n// const app = express();\n// var bodyParser = require(\"body-parser\");\n// const idToSidDict = {};\n\nconst server = http.createServer();\nconst roomID = uuidv4();\n\n// app.use(bodyParser.urlencoded({ extended: false }));\n// app.use(bodyParser.json());\n// app.use(\n//   cors({\n//     origin: process.env.REACT_APP_URL,\n//     methods: [\"GET\", \"POST\"],\n//   })\n// );\nconsole.log(process.env.REACT_APP_URL);\nconst io = socketIO(server, {\n  cors: {\n    origin: process.env.REACT_APP_URL, // Replace with the origin of your React application\n    methods: [\"GET\", \"POST\"], // Specify the allowed methods\n  },\n});\n\nio.use(socketIOP2P);\n\nio.on(\"connection\", (socket) => {\n  console.log(\"A client connected.\");\n  socket.emit(\"send_room_id\", roomID);\n\n  socket.join(roomID);\n\n  socket.on(\"message\", (data) => {\n    console.log(\"Received message:\", data);\n    // Handle the received message as needed\n  });\n\n  socket.on(\"get_terminal_code\", async (code) => {\n    try {\n      await execShellCommand(code, socket);\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\n  // socket.on(\"get_terminal_code\", async ({ container, code }) => {\n  //   console.log(`docker exec -d ${container} ${code}`);\n  //   const output = await execShellCommand(\n  //     `docker exec ${container} ${code} > output.txt`\n  //   ); // Pass the socket as an argument\n  //   let outputFileName = \"output.txt\";\n  //   fs.readFile(outputFileName, \"utf8\", (err, data) => {\n  //     if (err) {\n  //       console.error(\"Error reading output file:\", err);\n  //       return;\n  //     }\n\n  //     // Emit the output to the client\n  //     socket.emit(\"command_output\", { output: data });\n\n  //     // Remove the output file\n  //     // fs.unlink(outputFileName, (err) => {\n  //     //   if (err) {\n  //     //     console.error(\"Error deleting output file:\", err);\n  //     //     return;\n  //     //   }\n  //     //   console.log(\"Output file deleted.\");\n  //     // });\n  //   });\n  // });\n\n  socket.on(\"disconnect\", () => {\n    console.log(\"A client disconnected.\");\n  });\n});\n\nconst execShellCommand = (cmd, socket) => {\n  console.log(cmd, socket);\n  const exec = require(\"child_process\").exec;\n  return new Promise((resolve, reject) => {\n    const child = exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.log(error.message);\n        socket.emit(\"command_output\", error.message);\n        reject(error);\n      }\n    });\n\n    child.stdout.on(\"data\", (data) => {\n      // console.log(\"stdout:\", data);\n      socket.emit(\"command_output\", data);\n    });\n\n    child.stderr.on(\"data\", (data) => {\n      socket.emit(\"command_output\", data);\n    });\n\n    child.on(\"close\", (code) => {\n      console.log(\"Child process exited with code:\", code);\n    });\n  });\n};\n\n// const execShellCommand = (cmd) => {\n//   const exec = require(\"child_process\").exec;\n\n//   return new Promise((resolve, reject) => {\n//     exec(cmd, (error, stdout, stderr) => {\n//       if (error) {\n//         reject(error);\n//       } else {\n//         resolve(stdout || stderr);\n//       }\n//     });\n//   });\n// };\n\n// app.get(\"/\", (req, res) => {\n//   res.status(200).json({ message: \"Hello From Qcloud Client!\" });\n// });\n\n// // const port = 3001; // Choose a port number\nserver.listen(22, () => {\n  console.log(`Server listening on port 22`);\n});\n\n// const index = (req, res) => {\n//   // res.writeHead(200, { \"Content-Type\": \"application/json\" });\n//   // res.end(JSON.stringify({ message: \"HAHAHAHA\" }));\n// };\n\n// io.on(\"connection\", (socket) => {\n\n//   console.log(\"connect\", socket.id);\n//   console.log(socket.handshake.headers[\"x-real-ip\"]);\n\n//   socket.on(\"set_id\", (data) => {\n//     const { id } = data;\n//     idToSidDict[id] = socket.id;\n//     console.log(idToSidDict);\n//     console.log(id);\n//     socket.emit(\"status\", { status: \"success\" });\n//   });\n\n//   socket.on(\"live_gpu_data\", (data) => {\n//     console.log(`live_gpu_data from sid: ${socket.id}:`, data);\n//   });\n\n//   socket.on(\"disconnect\", () => {\n//     console.log(\"disconnect\", socket.id);\n//   });\n\n//   socket.on(\"get_clients\", () => {\n//     // commented out for testing purposes //\n//     // const clients = Object.keys(io.sockets.adapter.rooms['/']).filter((key) => key !== null);\n//     // const clientsData = {};\n//     // for (const id of clients) {\n//     //   clientsData[id] = idToSidDict[id];\n//     // }\n//     // socket.emit('clients', clientsData);\n\n//     const clientsData = {};\n//     for (const [roomName, room] of io.sockets.adapter.rooms) {\n//       const clients = Array.from(room);\n//       clientsData[roomName] = clients;\n//     }\n//     socket.emit(\"clients\", clientsData);\n//   });\n\n//   socket.on(\"code_run\", (data) => {\n//     const codeRequestDict = {};\n//     console.log(\"Running Code\");\n//     const sid = uuidv4();\n//     codeRequestDict[sid] = socket.id;\n//     const jsonData = JSON.parse(data);\n//     io.to(socket.id).emit(\"code_run\", { code: jsonData.data.code, sid });\n//   });\n\n//   socket.on(\"code_output\", (data) => {\n//     const codeRequestDict = {};\n//     console.log(\"Output From sid:\", socket.id);\n//     console.log(data);\n//     io.to(codeRequestDict[socket.id]).emit(\"message\", data);\n//     delete codeRequestDict[socket.id];\n//   });\n\n//   const docker_start = async () => {\n//     try {\n//       const ackData = await io.to(socket.id).emit(\"docker_start\", {});\n//       console.log(ackData);\n//       return true;\n//     } catch (err) {\n//       console.log(err);\n//     }\n\n//     console.log(\"docker started\");\n//   };\n//   docker_start();\n\n//   // socket.on(\"docker_start\", async (peerSid) => {\n//   // callback(ackData);\n//   // });\n\n//   socket.on(\"docker_stop\", async (peerSid) => {\n//     const ackData = await io.to(peerSid).emit(\"docker_stop\", {});\n//     // callback(ackData);\n//   });\n// });\n\n// server.on(\"request\", index);\n// server.listen(process.env.PORT || 8002, () => {\n//   console.log(`listening on port : ${process.env.PORT}`);\n// });\n",["112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":5,"column":10,"nodeType":"120","messageId":"121","endLine":5,"endColumn":23},{"ruleId":"118","severity":1,"message":"122","line":6,"column":10,"nodeType":"120","messageId":"121","endLine":6,"endColumn":31},{"ruleId":"118","severity":1,"message":"123","line":37,"column":9,"nodeType":"120","messageId":"121","endLine":37,"endColumn":26},{"ruleId":"118","severity":1,"message":"124","line":47,"column":9,"nodeType":"120","messageId":"121","endLine":47,"endColumn":20},{"ruleId":"118","severity":1,"message":"125","line":29,"column":10,"nodeType":"120","messageId":"121","endLine":29,"endColumn":16},{"ruleId":"118","severity":1,"message":"126","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":14},{"ruleId":"127","severity":1,"message":"128","line":22,"column":7,"nodeType":"129","messageId":"130","endLine":22,"endColumn":86},{"ruleId":"118","severity":1,"message":"131","line":68,"column":17,"nodeType":"120","messageId":"121","endLine":68,"endColumn":33},{"ruleId":"118","severity":1,"message":"132","line":190,"column":11,"nodeType":"120","messageId":"121","endLine":190,"endColumn":15},{"ruleId":"133","severity":1,"message":"134","line":37,"column":4,"nodeType":"135","endLine":37,"endColumn":6,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"137","line":1,"column":20,"nodeType":"120","messageId":"121","endLine":1,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":6,"column":3,"nodeType":"120","messageId":"121","endLine":6,"endColumn":16},{"ruleId":"118","severity":1,"message":"122","line":10,"column":10,"nodeType":"120","messageId":"121","endLine":10,"endColumn":31},{"ruleId":"118","severity":1,"message":"138","line":13,"column":3,"nodeType":"120","messageId":"121","endLine":13,"endColumn":25},{"ruleId":"118","severity":1,"message":"139","line":19,"column":7,"nodeType":"120","messageId":"121","endLine":19,"endColumn":12},{"ruleId":"118","severity":1,"message":"140","line":5,"column":7,"nodeType":"120","messageId":"121","endLine":5,"endColumn":13},{"ruleId":"118","severity":1,"message":"141","line":20,"column":9,"nodeType":"120","messageId":"121","endLine":20,"endColumn":13},{"ruleId":"127","severity":1,"message":"128","line":32,"column":5,"nodeType":"129","messageId":"130","endLine":32,"endColumn":40},{"ruleId":"127","severity":1,"message":"128","line":43,"column":5,"nodeType":"129","messageId":"130","endLine":43,"endColumn":43},{"ruleId":"118","severity":1,"message":"142","line":5,"column":3,"nodeType":"120","messageId":"121","endLine":5,"endColumn":16},{"ruleId":"118","severity":1,"message":"143","line":7,"column":3,"nodeType":"120","messageId":"121","endLine":7,"endColumn":16},{"ruleId":"118","severity":1,"message":"144","line":19,"column":9,"nodeType":"120","messageId":"121","endLine":19,"endColumn":17},{"ruleId":"118","severity":1,"message":"132","line":50,"column":11,"nodeType":"120","messageId":"121","endLine":50,"endColumn":15},{"ruleId":"114","replacedBy":"145"},{"ruleId":"116","replacedBy":"146"},{"ruleId":"118","severity":1,"message":"147","line":2,"column":7,"nodeType":"120","messageId":"121","endLine":2,"endColumn":9},{"ruleId":"114","replacedBy":"148"},{"ruleId":"116","replacedBy":"149"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'removeGpuData' is defined but never used.","Identifier","unusedVar","'removeSshCredientials' is defined but never used.","'handleInputChange' is assigned a value but never used.","'handleLogin' is assigned a value but never used.","'errors' is assigned a value but never used.","'pool' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'validInsertedIds' is assigned a value but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'systemSpecs'. Either include it or remove the dependency array.","ArrayExpression",["152"],"'useEffect' is defined but never used.","'stopAndDeleteContainer' is defined but never used.","'ngrok' is assigned a value but never used.","'docker' is assigned a value but never used.","'PORT' is assigned a value but never used.","'ClickableText' is defined but never used.","'PrimaryButton' is defined but never used.","'dispatch' is assigned a value but never used.",["150"],["151"],"'fs' is assigned a value but never used.",["150"],["151"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},"Update the dependencies array to be: [systemSpecs]",{"range":"155","text":"156"},[1300,1302],"[systemSpecs]"]