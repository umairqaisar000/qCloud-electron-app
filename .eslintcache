[{"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/index.js":"1","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/App.js":"2","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/Context/AuthContext.js":"3","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/HomePage/index.jsx":"4","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage/index.jsx":"5","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/SignupPage/index.jsx":"6","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/PoolConnection/index.js":"7","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/GpuData/index.js":"8","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/sshData/index.js":"9","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/SystemSpecs/index.jsx":"10","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/scripts.js":"11","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/GpuNode/index.jsx":"12","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/services/dockerCreation.js":"13","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage2/index.jsx":"14","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/TopBar/index.jsx":"15","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/Card/index.jsx":"16","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/config.js":"17","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/server/index.js":"18"},{"size":306,"mtime":1694081723441,"results":"19","hashOfConfig":"20"},{"size":640,"mtime":1694081723437,"results":"21","hashOfConfig":"20"},{"size":1113,"mtime":1694081723437,"results":"22","hashOfConfig":"20"},{"size":2720,"mtime":1694081723445,"results":"23","hashOfConfig":"20"},{"size":6914,"mtime":1694081723445,"results":"24","hashOfConfig":"20"},{"size":4661,"mtime":1691582911246,"results":"25","hashOfConfig":"20"},{"size":598,"mtime":1691576510432,"results":"26","hashOfConfig":"20"},{"size":13163,"mtime":1694081723441,"results":"27","hashOfConfig":"20"},{"size":2926,"mtime":1694081723441,"results":"28","hashOfConfig":"20"},{"size":1595,"mtime":1694081723441,"results":"29","hashOfConfig":"20"},{"size":2940,"mtime":1695481393791,"results":"30","hashOfConfig":"20"},{"size":15459,"mtime":1695359446171,"results":"31","hashOfConfig":"20"},{"size":6016,"mtime":1695485712091,"results":"32","hashOfConfig":"20"},{"size":3651,"mtime":1691591277654,"results":"33","hashOfConfig":"34"},{"size":1645,"mtime":1694081723441,"results":"35","hashOfConfig":"20"},{"size":145,"mtime":1691666529448,"results":"36","hashOfConfig":"34"},{"size":107,"mtime":1695474297564,"results":"37","hashOfConfig":"20"},{"size":6234,"mtime":1691576510432,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"g0q7tn",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},"1hdgfwb",{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/index.js",[],["87","88"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/App.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/Context/AuthContext.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/HomePage/index.jsx",["89","90"],"import React, { useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport SystemSpecs from '../../components/SystemSpecs'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { removeGpuData,updateGpuStatus } from '../../database/GpuData'\nimport { removeSshCredientials } from '../../database/sshData'\nimport TopBar from '../../components/TopBar'\nimport { SecondaryButton } from 'qlu-20-ui-library'\nimport './style.scss'\nconst ngrok = window.require('ngrok')\n\nconst HomePage = () => {\n  const navigate = useNavigate()\n  const { logout } = useContext(AuthContext)\n\n  // const handleWithdraw = async () => {\n  //   try {\n  //     await removeSshCredientials()\n  //     await removeGpuData()\n  //     await stopAndDeleteContainer(IMAGE_NAME)\n  //     await ngrok.disconnect()\n  //     setIsLend(false)\n  //   } catch (err) {\n  //     setErrorMessage(\n  //       'Withdrawal failed. Please try again. Error: ' + err.message\n  //     )\n  //     setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n  //     console.log(err)\n  //   }\n  // }\n\n  const handleLogout = async () => {\n    \n    // removeSshCredientials()\n    // removeGpuData()\n        const user_id = JSON.parse(localStorage.getItem('userData')).id\n        console.log(\"User_idddddddd\",user_id);\n        await updateGpuStatus(user_id, 'disconnected'); // Update gpu_status to 'active'\n      \n        logout()\n    ngrok.disconnect()\n    navigate('/')\n  }\n\n  return (\n    <>\n      <TopBar />\n      <div className=\"main-content\">\n      <div className=\"gpu-bar\">\n        <div className=\"active-gpus\">\n          <div className=\"text\">\n          Active Gpu's\n          </div>\n          \n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"87\"\n            height=\"2\"\n            viewBox=\"0 0 87 2\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M1 1H86\"\n              stroke=\"#FF8D4E\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n        <div className=\"total-gpus\">\n          <div className=\"text\">Total Gpus</div>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"87\"\n            height=\"2\"\n            viewBox=\"0 0 87 2\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M1 1H86\"\n              stroke=\"#FF8D4E\"\n              stroke-width=\"2\"\n              stroke-linecap=\"round\"\n            />\n          </svg>\n        </div>\n        \n      </div>\n      <SystemSpecs />\n      </div>\n    <div className=\"logout-button\">\n    <SecondaryButton text='Logout' onClick={handleLogout}/>\n    </div>\n \n    </>\n  )\n}\n\nexport default HomePage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage/index.jsx",["91","92"],"import React, { useState, useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { pool } from '../../database/PoolConnection'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.scss'\nimport * as Yup from 'yup'\nimport { AuthNavBar,InputField, Loader} from 'qlu-20-ui-library'\nconst config = require('../../utils/config')\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const navigate = useNavigate()\n  const { login } = useContext(AuthContext)\n  const [emailError, setEmailError] = useState('')\n  const [passwordError, setPasswordError] = useState('')\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    // setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleLogin = async () => {\n    setEmailError('')\n    setPasswordError('')\n  \n    if (!email && !password) {\n      setEmailError('Email is required')\n\n      setPasswordError('Password is required')\n      return\n    }\n    if (!email) {\n      setEmailError('Email is required')\n      return\n    }\n\n    // if (!isEmailValid(email)) {\n    //   setEmailError(\"Invalid email format\");\n    //   return;\n    // }\n\n    if (!password) {\n      setPasswordError('Password is required')\n      return\n    }\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message\n              return acc\n            },\n            {}\n          )\n          // setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n\n          Object.values(validationErrorsMap).forEach(errorMsg => {\n            toast.error(errorMsg)\n          })\n        }\n        return\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const query = 'SELECT * FROM members WHERE email = $1'\n        const result = await client.query(query, [email])\n\n        if (result.rowCount === 1) {\n          const storedPassword = result.rows[0].password // Assuming the password column is named \"password\" in the database\n          console.log('storedPassword:', storedPassword)\n          // Compare the stored password with the entered password\n          const passwordMatch = await bcrypt.compare(password, storedPassword)\n\n          if (passwordMatch) {\n            console.log('User authenticated')\n            //   setIsAuthenticated(true)\n            //   localStorage.setItem('userData', email);\n            login(result.rows[0].id,\n              result.rows[0].email,\n              result.rows[0].org_id)\n            navigate('/homepage')\n          } else {\n            console.log('Invalid email or password')\n          }\n\n          client.release()\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const LoginHandler = async (email, password) => {\n    setLoading(true);\n    setEmailError('');\n    setPasswordError('');\n\n    try {\n      await validationSchema.validate({ email, password }, { abortEarly: false });\n\n      const response = await fetch(config.apiUrl + '/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      }).then((response) => response.json());\n\n      if (response.success === true) {\n        localStorage.setItem('userData', JSON.stringify(response.user));\n        localStorage.setItem('xhqr', JSON.stringify(response.user?.xhqr));\n        navigate('/homepage');\n      } else {\n        toast.error('Incorrect email or password. Please re-enter.');\n      }\n    } catch (validationError) {\n      // Handle Yup validation errors\n      validationError.inner.forEach((error) => {\n        if (error.path === 'email') {\n          setEmailError(error.message);\n        } else if (error.path === 'password') {\n          setPasswordError(error.message);\n        }\n        toast.error(error.message);\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  return (\n    <div className=\"login-page\">\n      <div className=\"top_nav_bar\">\n        <AuthNavBar\n        text=\"Don't have an account?\"\n        textColor=\"gray\"\n        buttonText=\"Sign up\"\n        buttonColorVaraint=\"primaryOrangeBorderAndText\"\n        ></AuthNavBar>\n      </div>\n      <div className=\"login-container\">\n      <h3>Login</h3>\n        <div className=\"login-details\">\n          <div className=\"email\">\n          <label className=\"email\">WORK EMAIL</label>\n          <InputField\n              id=\"email\"\n              value={email}\n              onChangeHandler={e => setEmail(e.target.value)}\n              placeholder='Enter your email address'\n              required\n            />\n             {emailError && <p className=\"error-message\">{emailError}</p>}\n          </div>\n          <div className=\"pass\">\n          <label htmlFor=\"\" className=\"password\">\n              PASSWORD\n            </label>\n            <InputField\n              type=\"password\"\n              value={password}\n              placeholder='Enter your password'\n              onChangeHandler={e => setPassword(e.target.value)}\n              required\n            />\n            {passwordError && <p className=\"error-message\">{passwordError}</p>}\n          </div>\n          <div className=\"button\">\n          <button\n            type=\"submit\"\n            className=\"primaryButton\"\n            onClick={() => LoginHandler(email,password)}\n            disabled={loading}\n          >\n           {loading ? <Loader/> : 'Login'}\n          </button>\n        </div>\n        </div>\n      </div>\n      <ToastContainer position=\"top-right\" autoClose={3000} />\n    </div>\n\n   \n  )\n}\n\nexport default LoginPage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/SignupPage/index.jsx",["93"],"import React, { useState } from 'react'\nimport { pool } from '../../database/PoolConnection'\nimport { Modal, Button } from 'react-bootstrap'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.css' // Import custom CSS file for Signup component styling\nimport * as Yup from 'yup'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst SignupPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showModal, setShowModal] = useState(false) // State to control the modal visibility\n  const [errors, setErrors] = useState({ email: '', password: '' })\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleSignup = async () => {\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message\n              return acc\n            },\n            {}\n          )\n          setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n\n          Object.values(validationErrorsMap).forEach(errorMsg => {\n            toast.error(errorMsg)\n          })\n        }\n        return\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const saltRounds = 10\n        const hashedPassword = await bcrypt.hash(password, saltRounds)\n        const query =\n          'INSERT INTO client_user (email, password) VALUES ($1, $2)'\n        await client.query(query, [email, hashedPassword])\n        console.log('User registered')\n        client.release()\n        setShowModal(true) // Show the success modal\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false) // Close the modal\n  }\n\n  return (\n    <div className=\"signup-container\">\n      <ToastContainer /> \n      <form className=\"signup-form\">\n        <h2 className=\"signup-heading\">Signup</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"signup-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"signup-input\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"signup-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"signup-input\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Enter your password\"\n            value={password}\n            onChange={handleInputChange}\n          />\n        </div>\n        <button type=\"button\" className=\"signup-button\" onClick={handleSignup}>\n          Signup\n        </button>\n        <a href=\"/\" className=\"login-link\">\n          Already have an account? Login\n        </a>\n\n        {/* Success Modal */}\n        <Modal show={showModal} onHide={handleCloseModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Success</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            User registration successful. You can now log in with your\n            credentials.\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleCloseModal}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </form>\n    </div>\n  )\n}\n\nexport default SignupPage\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/PoolConnection/index.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/GpuData/index.js",["94","95","96","97"],"import { pool } from '../PoolConnection'\nimport { addSshCredientials } from '../../database/sshData'\n\n//const SERVER_URL = import.meta.env.VITE_APP_SERVER_URL;\nconst config = require('../../utils/config')\n\nexport const addGpuData = async (\n  systemSpecs,\n  user_id,\n  image_id,\n  gpu_status\n) => {\n  try {\n    console.log('In the gpuNode')\n    const org_id = JSON.parse(localStorage.getItem('userData')).org_id\n\n    const gpuDataList = systemSpecs['gpu']\n    const ramData = systemSpecs['ram']\n    const cpuData = systemSpecs['cpu']\n\n    if (user_id === null && image_id === null) {\n      throw 'Error adding data to the database ERROR: User or Docker Image Not Found'\n    }\n\n    const insertedIds = await Promise.all(\n      gpuDataList.map(async gpuData => {\n        const existingRecord = await checkExistingRecord(user_id, gpuData.index)\n        console.log('Existing Record: ' + existingRecord)\n        if (!existingRecord) {\n          const requestBody = {\n            gpuData: gpuData ? gpuData.name : null,\n            gpuFree: gpuData ? gpuData.free : null,\n            gpuUsed: gpuData ? gpuData.used : null,\n            gpuTotal: gpuData ? gpuData.total : null,\n            ramFree: ramData ? ramData.free : null,\n            ramUsed: ramData ? ramData.used : null,\n            cpuData: cpuData ? cpuData : null,\n            user_id: user_id ? user_id : null,\n            image_id: image_id ? image_id : null,\n            gpu_status: gpu_status ? gpu_status : null,\n            gpu_index: gpuData ? gpuData.index : null,\n            org_id: org_id ? org_id : null\n          }\n\n          try {\n            const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n            const response = await fetch(\n              `${config.apiUrl}/system_specs/addSystemSpecs`,\n              {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  Authorization: token\n                },\n                body: JSON.stringify(requestBody)\n              }\n            ).then(response => response.json())\n\n            console.log('Inserted data with ID:', response.request[0].id)\n            const insertedId = response.request[0].id;\n            localStorage.setItem('current_job_id', insertedId);\n            return response.id\n          } catch (err) {\n            console.error('Error adding data via fetch', err)\n            throw err\n          }\n        } else {\n          const validInsertedIds = insertedIds.filter(id => id !== null)\n          // localStorage.setItem('current_job_id', validInsertedIds)\n          console.log(\n            'Data for GPU index',\n            gpuData.index,\n            'already exists. Skipping insertion.'\n          )\n          return null\n        }\n      })\n    )\n\n    await addSshCredientials();\n    const validInsertedIds = insertedIds.filter(id => id !== null)\n    localStorage.setItem('current_job_id', validInsertedIds)\n  } catch (err) {\n    console.error('Error inserting data', err)\n    throw err\n  }\n}\nexport const checkExistingRecord = async (user_id, gpu_index) => {\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/checkExistingRecord`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify({ user_id, gpu_index })\n      }\n    ).then(response => response.json())\n    console.log('Resonse of Duplicate,', response.success)\n    console.log('Response Received,', response)\n    if (!response.success) {\n      throw new Error('Failed to check duplicate GPU data')\n    }\n\n    // const responseData = await response.json();\n    // console.log(\"Response Dataa: \" + responseData);\n    return response.request.isDuplicate // true if duplicate, false otherwise\n  } catch (err) {\n    console.error('Error checking duplicate GPU data', err)\n    throw err\n  }\n}\n\n// export const removeGpuData = async () => {\n//   // Insert the data into the PostgreSQL database\n//   const query = `DELETE FROM system_specs s WHERE s.id = ${localStorage.getItem(\n//     'current_job_id'\n//   )}`\n\n//   try {\n//     const result = await pool.query(query)\n//     localStorage.removeItem('current_job_id')\n//   } catch (err) {\n//     throw ('Error Deleting data', err)\n//   }\n// }\nexport const removeGpuData = async () => {\n  const currentJobId = localStorage.getItem('current_job_id')\n\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/removeGpuData`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify({ current_job_id: currentJobId })\n      }\n    )\n\n    if (!response.success) {\n      throw new Error('Failed to delete GPU data')\n    }\n\n    localStorage.removeItem('current_job_id')\n    console.log('GPU data removed successfully')\n  } catch (err) {\n    console.error('Error deleting GPU data', err)\n    throw err\n  }\n}\n// export const removeGpuUserData = async user_id => {\n//   const deleteQuery = `DELETE FROM system_specs WHERE user_id = $1`\n//   const deleteValues = [user_id ? user_id : null]\n\n//   try {\n//     await pool.query(deleteQuery, deleteValues)\n//     console.log('Removed GPU data for user:', user_id)\n//   } catch (err) {\n//     console.error('Error removing GPU data', err)\n//     throw ('Error removing GPU data', err)\n//   }\n// }\nexport const removeUserGpuData = async user_id => {\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    const response = await fetch(\n      `${config.apiUrl}/system_specs/removeGpuUserData`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: token\n        },\n        body: JSON.stringify({ user_id })\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error('Failed to remove GPU data for user')\n    }\n\n    const data = await response.json()\n  } catch (err) {\n    console.error('Error removing GPU data for user', err)\n    throw err\n  }\n}\n\n// export const getImageId = async user_id => {\n//   // Insert the data into the PostgreSQL database\n\n//   const query = `SELECT image_id FROM system_specs s WHERE s.user_id = ${user_id}`\n//   try {\n//     const result = await pool.query(query)\n//     console.log(\"Image Id result:\", result);\n//     return result?.rows[0]?.image_id\n//   } catch (err) {\n//     throw ('Error getting data', err)\n//   }\n// }\n\nexport const getImageId = async user_id => {\n  try {\n    console.log('Getting Image ID user_id', user_id)\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}')\n    const response = await fetch(`${config.apiUrl}/system_specs/getImageId`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify({ user_id })\n    }).then(response => response.json())\n\n    if (!response.success) {\n      throw new Error('Failed to get image ID')\n    }\n    console.log('Image ID response: ', response)\n    return response.request\n  } catch (err) {\n    console.error('Error getting image ID', err)\n    throw err\n  }\n}\n\n// export const updateGpuStatus = async (user_id, gpu_status) => {\n//   const updateQuery = `UPDATE system_specs SET gpu_status = $1 WHERE user_id = $2`\n//   const updateValues = [\n//     gpu_status ? gpu_status : null,\n//     user_id ? user_id : null\n//   ]\n\n//   try {\n//     await pool.query(updateQuery, updateValues)\n//     console.log('Updated gpu_status for user:', user_id)\n//   } catch (err) {\n//     console.error('Error updating gpu_status', err)\n//     throw ('Error updating gpu_status', err)\n//   }\n// }\n\nexport const updateGpuStatus = async (user_id, gpu_status) => {\n  try {\n    const { token } = JSON.parse(localStorage.getItem('xhqr') || '{}');\n    const response = await fetch(`${config.apiUrl}/system_specs/updateGpuStatus`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token,\n      },\n      body: JSON.stringify({ user_id, gpu_status }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update GPU status');\n    }\n\n    const data = await response.json();\n    console.log('Updated gpu_status for user:', user_id);\n    return data.success;\n  } catch (err) {\n    console.error('Error updating gpu_status', err);\n    throw err;\n  }\n};\n\n\n// import { pool } from '../PoolConnection'\n// import { addSshCredientials } from '../../database/sshData'\n\n// export const addGpuData = async (\n//   systemSpecs,\n//   user_id,\n//   image_id,\n//   gpu_status\n// ) => {\n//   const gpuDataList = systemSpecs['gpu'];\n//   const ramData = systemSpecs['ram'];\n//   const cpuData = systemSpecs['cpu'];\n//   const org_id = JSON.parse(localStorage.getItem(\"userData\")).org_id;\n//   console.log(\"org iddddd\", org_id);\n// console.log(\"gpustatuss\",gpu_status);\n//   if (user_id === null && image_id === null) {\n//     throw 'Error adding data to the database ERROR: User or Docker Image Not Found';\n//   }\n\n//   try {\n//     await Promise.all(\n//       gpuDataList.map(async (gpuData) => {\n//         const existingRecord = await checkExistingRecord(user_id, gpuData.index);\n\n//         if (!existingRecord) {\n//           const query =\n//             'INSERT INTO system_specs (gpu_name, gpu_free, gpu_used, gpu_total, ram_free, ram_used, cpu_name, user_id, image_id, gpu_status, gpu_index,org_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id';\n\n//           const values = [\n//             gpuData ? gpuData.name : null,\n//             gpuData ? gpuData.free : null,\n//             gpuData ? gpuData.used : null,\n//             gpuData ? gpuData.total : null,\n//             ramData ? ramData.free : null,\n//             ramData ? ramData.used : null,\n//             cpuData ? cpuData : null,\n//             user_id ? user_id : null,\n//             image_id ? image_id : null,\n//             gpu_status ? gpu_status : null,\n//             gpuData ? gpuData.index : null,\n//             org_id ? org_id : null\n//           ];\n\n//           try {\n//             const result = await pool.query(query, values);\n//             const insertedId = result.rows[0].id;\n//             localStorage.setItem('current_job_id', insertedId);\n//             console.log('Inserted data with ID:', insertedId);\n//           } catch (err) {\n//             console.error('Error inserting data', err);\n//             throw err;\n//           }\n//         } else {\n//           console.log('Data for GPU index', gpuData.index, 'already exists. Skipping insertion.');\n//         }\n//       })\n//     );\n\n//     await addSshCredientials();\n//   } catch (err) {\n//     console.error('Error inserting data', err);\n//     throw err;\n//   }\n// };\n// export const checkExistingRecord = async (user_id, gpu_index) => {\n//   const query = 'SELECT COUNT(*) FROM system_specs WHERE user_id = $1 AND gpu_index = $2';\n//   const values = [user_id, gpu_index];\n\n//   try {\n//     const result = await pool.query(query, values);\n//     const existingRecordsCount = result.rows[0].count;\n//     return existingRecordsCount > 0;\n//   } catch (err) {\n//     console.error('Error checking existing record', err);\n//     throw err;\n//   }\n// };\n\n// export const removeGpuData = async () => {\n//   // Insert the data into the PostgreSQL database\n//   const query = `DELETE FROM system_specs s WHERE s.id = ${localStorage.getItem(\n//     'current_job_id'\n//   )}`\n\n//   try {\n//     const result = await pool.query(query)\n//     localStorage.removeItem('current_job_id')\n//   } catch (err) {\n//     throw ('Error Deleting data', err)\n//   }\n// }\n// export const removeGpuUserData = async user_id => {\n//   const deleteQuery = `DELETE FROM system_specs WHERE user_id = $1`\n//   const deleteValues = [user_id ? user_id : null]\n\n//   try {\n//     await pool.query(deleteQuery, deleteValues)\n//     console.log('Removed GPU data for user:', user_id)\n//   } catch (err) {\n//     console.error('Error removing GPU data', err)\n//     throw ('Error removing GPU data', err)\n//   }\n// }\n\n// export const getImageId = async user_id => {\n//   // Insert the data into the PostgreSQL database\n\n//   const query = `SELECT image_id FROM system_specs s WHERE s.user_id = ${user_id}`\n//   try {\n//     const result = await pool.query(query)\n//     return result?.rows[0]?.image_id\n//   } catch (err) {\n//     throw ('Error getting data', err)\n//   }\n// }\n\n// export const updateGpuStatus = async (user_id, gpu_status) => {\n//   const updateQuery = `UPDATE system_specs SET gpu_status = $1 WHERE user_id = $2`\n//   const updateValues = [\n//     gpu_status ? gpu_status : null,\n//     user_id ? user_id : null\n//   ]\n\n//   try {\n//     await pool.query(updateQuery, updateValues)\n//     console.log('Updated gpu_status for user:', user_id)\n//   } catch (err) {\n//     console.error('Error updating gpu_status', err)\n//     throw ('Error updating gpu_status', err)\n//   }\n// }\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/database/sshData/index.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/SystemSpecs/index.jsx",["98"],"import React, { useEffect, useState } from 'react';\nimport GpuNode from '../GpuNode';\nimport { execShellCommand, getSystemSpecs } from '../../utils/scripts';\nimport { getImageId } from '../../database/GpuData'\nimport './style.scss'\nconst SystemSpecs = () => {\nconst [systemSpecs, setSystemSpecs] = useState(null);\nconst [isRunning, setIsRunning] = useState(false);\n\nuseEffect(() => {\n    const fetchSystemSpecs = async () => {\n    try {\n        console.log('Fetching system specs');\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        const imageId = await getImageId(userData.id);\n        console.log('Image Id: ' + imageId);\n        if(imageId){\n            const status = await execShellCommand(`docker ps --filter \"ancestor=${imageId}\" --format \"{{.Status}}\"`)\n            console.log('Image Status: ' + status);\n            if(status.split(\" \")[0] === \"Up\"){\n                setIsRunning(true)\n            }else{\n                setIsRunning(false)\n            }\n        }\n\n        const specs = await getSystemSpecs();\n        console.log(\"Specsssssss:\", specs);\n        setSystemSpecs(specs);\n        console.log('Specs: ' , systemSpecs);\n    } catch (error) {\n        console.error('Error retrieving system specs:', error);\n    }\n    };\n\n    fetchSystemSpecs();\n}, []);\n\nif (!systemSpecs) {\n    return <div className='text-light'>loading...</div>\n}\n\nreturn (\n    <div> \n        <hr/>\n         <div className='card-container'> \n            <GpuNode systemSpecs={systemSpecs} isRunning={isRunning}/>\n        </div> \n    </div>\n);\n};\n\nexport default SystemSpecs;\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/scripts.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/GpuNode/index.jsx",["99","100","101","102","103","104"],"import { useState, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { Alert } from 'react-bootstrap'\nimport {\n  addGpuData,\n  removeGpuData,\n  updateGpuStatus,\n  checkExistingRecord\n} from '../../database/GpuData'\nimport { removeSshCredientials } from '../../database/sshData'\nimport {\n  createAndStartDocker,\n  stopAndDeleteContainer,\n  stopContainer\n} from '../../services/dockerCreation'\nimport { execShellCommand } from '../../utils/scripts'\nimport { SecondaryButton, Loader } from 'qlu-20-ui-library'\nimport './style.scss'\n\nconst ngrok = window.require('ngrok')\n\nconst ID = uuidv4()\n\nconst IMAGE_NAME = `client_dk_${ID}`\nconst CONTAINER_IMAGE_NAME = `client_dk_container_${ID}`\n\nconst GpuNode = ({ systemSpecs, isRunning }) => {\n  const [errorMessage, setErrorMessage] = useState('')\n  const [isLend, setIsLend] = useState(isRunning)\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false)\n  const [isLendLoading, setIsLendLoading] = useState(false)\n\n  console.log('Running????', isRunning)\n\n  const handleLend = async () => {\n    try {\n      setIsLendLoading(true)\n      const gpu_status = 'active';\n      const gpu_index = systemSpecs['gpu'][0].index;\n      const user_id = JSON.parse(localStorage.getItem('userData')).id;\n      console.log('SystemSpecsAll', systemSpecs['gpu']);\n      console.log('SystemSpecs', systemSpecs['gpu'][0].index);\n      console.log('Container Image Name', CONTAINER_IMAGE_NAME);\n      console.log(\"Running? or not?:\",isRunning);\n      const existingRecord = await checkExistingRecord(user_id, gpu_index)\n      console.log(\"Existing Record?\", existingRecord);\n      \n      if (!existingRecord) {\n        console.log(\"Here to create the Docker Container Image\");\n        if (systemSpecs) {\n          await createAndStartDocker(IMAGE_NAME, CONTAINER_IMAGE_NAME)\n          const image_id = await execShellCommand(\n            `docker images -q ${IMAGE_NAME}`\n          )\n          console.log('system Specs',systemSpecs)\n          console.log('userId and imageId ', user_id, image_id)\n          await addGpuData(systemSpecs, user_id, image_id, gpu_status)\n          setShowSuccessMessage(true)\n          setIsLend(true)\n          setTimeout(() => setShowSuccessMessage(false), 5000)\n        }\n      } else {\n        await updateGpuStatus(user_id, gpu_status)\n        setShowSuccessMessage(true)\n        setIsLend(true)\n      }\n      setIsLendLoading(false)\n    } catch (err) {\n      setIsLendLoading(false)\n      setErrorMessage('Lending failed. Please try again. Error: ' + err)\n      setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n      console.log(err)\n    }\n  }\n\n  const handleWithdraw = async () => {\n    try {\n      //  await removeSshCredientials()\n      //  await removeGpuData()\n    //  await stopContainer(IMAGE_NAME);\n //      await stopAndDeleteContainer(IMAGE_NAME)\n      //  await ngrok.disconnect()\n      const user_id = JSON.parse(localStorage.getItem('userData')).id\n      await updateGpuStatus(user_id, 'inactive')\n      setIsLend(false)\n    } catch (err) {\n      setErrorMessage(\n        'Withdrawal failed. Please try again. Error: ' + err.message\n      )\n      setTimeout(() => setErrorMessage(err), 5000); // Clear error message after 5 seconds\n      console.log(err);\n    }\n  }\n\n  return (\n    <>\n      {showSuccessMessage && (\n        <Alert\n          variant=\"primary\"\n          className=\"position-fixed top-0 end-0 mt-4 me-4\"\n          onClose={() => setShowSuccessMessage(false)}\n          dismissible\n        >\n          {!isLend ? 'Withdrawn success!' : 'Lending success!'}\n        </Alert>\n      )}\n      {errorMessage && (\n        <Alert\n          variant=\"danger\"\n          className=\"position-fixed top-0 end-0 mt-4 me-4\"\n          onClose={() => setErrorMessage(false)}\n          dismissible\n        >\n          {errorMessage}\n        </Alert>\n      )}\n\n      {/* Display GPU and system info in the card-container */}\n      {systemSpecs['gpu'] !== undefined ? (\n        systemSpecs['gpu']?.length >= 0 &&\n        systemSpecs['gpu']?.map((gpu, i) => (\n          <div key={i} className=\"gpu-card\">\n            <div className=\"title\">\n              <div className=\"left-info\">\n                <div className=\"gpu-num\">{`GPU-${i + 1}`}</div>\n                <div className=\"gpu-name\">{gpu.name}</div>\n              </div>\n\n              <div className=\"icon\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"22\"\n                  height=\"22\"\n                  viewBox=\"0 0 22 22\"\n                  fill=\"none\"\n                >\n                  <path\n                    d=\"M10.9974 15.585C10.7681 15.585 10.5805 15.7725 10.583 16.0018C10.583 16.2311 10.7706 16.4186 10.9999 16.4186C11.2291 16.4186 11.4167 16.2311 11.4167 16.0018C11.4167 15.7725 11.2291 15.585 10.9974 15.585\"\n                    stroke=\"#D5D5D5\"\n                    stroke-width=\"2.4\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M10.9974 10.583C10.7681 10.583 10.5805 10.7706 10.583 10.9998C10.583 11.2291 10.7706 11.4167 10.9999 11.4167C11.2291 11.4167 11.4167 11.2291 11.4167 10.9998C11.4167 10.7706 11.2291 10.583 10.9974 10.583\"\n                    stroke=\"#D5D5D5\"\n                    stroke-width=\"2.4\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M10.9974 5.58105C10.7681 5.58105 10.5805 5.76863 10.583 5.99789C10.583 6.22716 10.7706 6.41473 10.9999 6.41473C11.2291 6.41473 11.4167 6.22716 11.4167 5.99789C11.4167 5.76863 11.2291 5.58105 10.9974 5.58105\"\n                    stroke=\"#D5D5D5\"\n                    stroke-width=\"2.4\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                </svg>\n              </div>\n            </div>\n            <div className=\"logo\">\n              {isLend ? (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"87\"\n                  height=\"87\"\n                  viewBox=\"0 0 87 87\"\n                  fill=\"none\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M12.6875 14.5H70.6875C76.6936 14.5 81.5625 19.3689 81.5625 25.375V61.625C81.5625 67.6311 76.6936 72.5 70.6875 72.5H12.6875V14.5Z\"\n                    stroke=\"#99552F\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M12.6875 76.125V14.5C12.6875 12.498 11.0645 10.875 9.0625 10.875H5.4375\"\n                    stroke=\"#99552F\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M23.5625 29V58\"\n                    stroke=\"#99552F\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M59.8164 43.5V60.0703\"\n                    stroke=\"url(#paint0_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M45.3164 43.4989V26.9258\"\n                    stroke=\"url(#paint1_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <circle\n                    cx=\"52.5664\"\n                    cy=\"43.5\"\n                    r=\"7.25\"\n                    stroke=\"#FF8D4E\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5664 36.25H69.1366\"\n                    stroke=\"url(#paint2_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5683 50.75H35.9951\"\n                    stroke=\"url(#paint3_linear_418_1525)\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.564 61.625H52.561C42.5511 61.6242 34.4371 53.5091 34.4375 43.4992C34.4379 33.4894 42.5526 25.375 52.5625 25.375C62.5724 25.375 70.6871 33.4894 70.6875 43.4992C70.6879 53.5091 62.5739 61.6242 52.564 61.625\"\n                    stroke=\"#FFBF9B\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <defs>\n                    <linearGradient\n                      id=\"paint0_linear_418_1525\"\n                      x1=\"62.5\"\n                      y1=\"52\"\n                      x2=\"57.5\"\n                      y2=\"52\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                    <linearGradient\n                      id=\"paint1_linear_418_1525\"\n                      x1=\"48\"\n                      y1=\"35.4273\"\n                      x2=\"43\"\n                      y2=\"35.4272\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                    <linearGradient\n                      id=\"paint2_linear_418_1525\"\n                      x1=\"60.8515\"\n                      y1=\"34.4375\"\n                      x2=\"60.8515\"\n                      y2=\"38.0625\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                    <linearGradient\n                      id=\"paint3_linear_418_1525\"\n                      x1=\"44.2817\"\n                      y1=\"48.9375\"\n                      x2=\"44.2817\"\n                      y2=\"52.5625\"\n                      gradientUnits=\"userSpaceOnUse\"\n                    >\n                      <stop stop-color=\"#FF8D4E\" />\n                      <stop offset=\"1\" stop-color=\"#FF8D4E\" stop-opacity=\"0\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              ) : (\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"87\"\n                  height=\"87\"\n                  viewBox=\"0 0 87 87\"\n                  fill=\"none\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    clip-rule=\"evenodd\"\n                    d=\"M12.6875 14.5H70.6875C76.6936 14.5 81.5625 19.3689 81.5625 25.375V61.625C81.5625 67.6311 76.6936 72.5 70.6875 72.5H12.6875V14.5Z\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M12.6875 76.125V14.5C12.6875 12.498 11.0645 10.875 9.0625 10.875H5.4375\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M23.5625 29V58\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M45.3164 43.4989V26.9258\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M59.8164 43.5V60.0703\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5664 36.25H69.1366\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.5683 50.75H35.9951\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <circle\n                    cx=\"52.5664\"\n                    cy=\"43.5\"\n                    r=\"7.25\"\n                    stroke=\"#ADADAD\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                  <path\n                    d=\"M52.564 61.625H52.561C42.5511 61.6242 34.4371 53.5091 34.4375 43.4992C34.4379 33.4894 42.5526 25.375 52.5625 25.375C62.5724 25.375 70.6871 33.4894 70.6875 43.4992C70.6879 53.5091 62.5739 61.6242 52.564 61.625\"\n                    stroke=\"#727272\"\n                    stroke-width=\"5.4375\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  />\n                </svg>\n              )}\n            </div>\n            <div className=\"system-info\">\n              <div className=\"info\">\n                <span className=\"name\">VRAM</span>\n                <span className=\"value\">{`${(\n                  (gpu.used + gpu.total) /\n                  1024\n                ).toFixed(2)} GB`}</span>\n              </div>\n              <div className=\"info\">\n                <span className=\"name\">RAM</span>\n                <span className=\"value\">{`${(\n                  (systemSpecs['ram'].total)\n                ).toFixed(2)} GB`}</span>\n              </div>\n              <div className=\"info\">\n                <span className=\"name\">CPU USAGE</span>\n                <span className=\"value\">{systemSpecs['cpu']}</span>\n              </div>\n            </div>\n            <div className=\"button\">\n              {!isLend ? (\n                <SecondaryButton\n                  text={isLendLoading ? <Loader /> : 'Lend GPU'} // Conditional rendering\n                  onClick={handleLend}\n                  disabled={isLendLoading} // Disable button while loading\n                />\n              ) : (\n                <SecondaryButton text=\"Stop Lending\" onClick={handleWithdraw} />\n              )}\n            </div>\n          </div>\n        ))\n      ) : (\n        <h3>No GPU</h3>\n      )}\n    </>\n  )\n}\n\nexport default GpuNode\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/services/dockerCreation.js",["105","106","107","108","109","110"],"const Docker = window.require('dockerode')\nconst { exec } = window.require('child_process')\nconst path = require('path')\nconst { app } = window.require('electron').remote;\nconst appPath = app.getAppPath();\n\nconst docker = new Docker()\n\nconst execShellCommand = cmd => {\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stdout || stderr)\n      }\n    })\n  })\n}\n\nexport async function createAndStartDocker(imageName, container_image_name) {\n  const PORT = 2222\n  // const currentDir = path.dirname(require.main.filename)\n  const currentDir = __dirname;\n\n  console.log('current_directory:', currentDir)\n  // const dockerfilePath = path.join(currentDir, 'src', 'server', 'Dockerfile')\n  // const dockerfilePath = path.join(appPath, 'src', 'server', 'Dockerfile');\n  console.log(\"appPath: \", appPath);\n  console.log(\"app\",app);\n  const unpackedPath = path.join(path.dirname(appPath), 'app.asar.unpacked');\n  console.log(\"unpackedPath: \", unpackedPath);\n  const dockerfilePath = path.join(unpackedPath, 'src', 'server', 'Dockerfile');\n  const contextPath = path.join(unpackedPath, 'src', 'server');\n  \n  // const contextPath = path.join(appPath, 'src', 'server');\n  const buildContext = path.join(currentDir, 'src')\n  // const dockerfilePath = path.join(currentDir, 'src', 'server', 'Dockerfile')\n  console.log('dockerfilePath:', dockerfilePath)\n  console.log('buildContext:', buildContext)\n  console.log('Creating Docker image...')\n  try {\n    await execShellCommand(\n      // `docker build --rm -t ${imageName} -f ${dockerfilePath} .`\n      // `docker build --rm -t ${imageName} -f ${dockerfilePath}  .`\n      `docker build --rm -t ${imageName} -f ${dockerfilePath} ${contextPath}`\n    )\n  } catch (error) {\n    alert(error);\n    console.error('Error Creating Docker image:', error)\n    throw 'Error Creating Docker image'\n  }\n\n  console.log('Running Docker container...')\n  try {\n    execShellCommand(\n      // `docker run -d --privileged --name ${imageName} ${imageName} -p 2222:22 docker:dind`\n      `docker run --privileged --gpus all -d -p 2222:22 --name ${imageName} ${imageName} `\n\n      // `docker run -d -p 2222:22 --name ${imageName} ${imageName}`\n      // `docker run -p ${PORT}:22 --name ${container_image_name} ${imageName}:latest`\n    )\n  } catch (error) {\n    alert(error);\n    console.error('Error running Docker container:', error)\n    throw 'Error running Docker container'\n  }\n}\n\nexport async function stopAndDeleteContainer(imageName) {\n  // Stop the container\n  const stopCommand = `docker stop ${imageName}`\n  exec(stopCommand, (stopError, stopStdout, stopStderr) => {\n    if (stopError) {\n      console.error(`Error stopping the container: ${imageName}`)\n      console.error(stopStderr)\n    } else {\n      console.log(`Container ${imageName} stopped successfully.`)\n\n      // Delete the container\n      const deleteContainerCommand = `docker rm ${imageName}`\n      exec(\n        deleteContainerCommand,\n        (\n          deleteContainerError,\n          deleteContainerStdout,\n          deleteContainerStderr\n        ) => {\n          if (deleteContainerError) {\n            console.error(`Error deleting the container: ${imageName}`)\n            console.error(deleteContainerStderr)\n          } else {\n            console.log(`Container ${imageName} deleted successfully.`)\n\n            // Now that the container is deleted, you can delete the image\n            const deleteImageCommand = `docker rmi ${imageName}`\n            exec(\n              deleteImageCommand,\n              (deleteImageError, deleteImageStdout, deleteImageStderr) => {\n                if (deleteImageError) {\n                  console.error(`Error deleting the image: ${imageName}`)\n                  console.error(deleteImageStderr)\n                } else {\n                  console.log(`Image ${imageName} deleted successfully.`)\n                }\n              }\n            )\n          }\n        }\n      )\n    }\n  })\n}\n\nexport async function stopContainer(imageName) {\n  // Stop the container\n  const stopCommand = `docker stop ${imageName}`\n  exec(stopCommand, (stopError, stopStdout, stopStderr) => {\n    if (stopError) {\n      console.error(`Error stopping the container: ${imageName}`)\n      console.error(stopStderr)\n    } else {\n      console.log(`Container ${imageName} stopped successfully.`)\n    }\n  })\n}\n\nexport async function containerExistsWithName(containerName) {\n  try {\n    const { stdout, stderr } = await execShellCommand(\n      `docker ps -a --filter \"name=${containerName}\" --format \"{{.ID}}\"`\n    )\n    //  const containerId = stdout.toString().trim(); // Convert stdout to string and trim whitespace\n    console.log('Containerr Exists Container ID: ', stdout)\n    return stdout !== undefined // If there is any output, the container exists\n  } catch (error) {\n    console.error(`Error checking container existence: ${error.message}`)\n    return false // Handle the error appropriately\n  }\n}\n\nexport async function isContainerRunning(containerName) {\n  try {\n    // Use docker inspect to get detailed information about the container\n    const { stdout, stderr } = await exec(\n      `docker inspect --format=\"{{.State.Status}}\" ${containerName}`\n    )\n    const containerStatus = stdout.toString().trim()\n\n    if (containerStatus.toLowerCase() === 'running') {\n      console.log('Container Status: ' + containerStatus)\n      return true\n    } else {\n      console.log('Container Status: ' + containerStatus)\n      return false\n    }\n  } catch (error) {\n    console.error(`Error checking container status: ${error.message}`)\n    return false // Handle the error appropriately\n  }\n}\n\nexport async function startContainer(containerName) {\n  try {\n    await exec(`docker start ${containerName}`)\n    console.log(`Container ${containerName} started successfully.`)\n  } catch (error) {\n    console.error(`Error starting container: ${error.message}`)\n    // Handle the error appropriately\n  }\n}\n","/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/views/LoginPage2/index.jsx",["111","112","113","114"],"import { useState } from 'react'\nimport './style.scss'\nimport {\n  AuthNavBar,\n  ClickableText,\n  InputField,\n  PrimaryButton\n} from 'qlu-20-ui-library'\n\n//import HomePage from \"../HomePage/index.jsx\";\nimport { useNavigate, Link } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n//import { setUserData } from \"../../reducers/userSlice\";\n//import { isEmailValid } from \"../../../utils\";\n\nfunction Login() {\n  //const SERVER_URL = import.meta.env.VITE_APP_SERVER_URL;\n  const [email, setEmail] = useState('')\n  const dispatch = useDispatch()\n  const [password, setPassword] = useState('')\n  const [emailError, setEmailError] = useState('')\n  const [passwordError, setPasswordError] = useState('')\n  const navigate = useNavigate()\n\n  const loginHandler = async () => {\n    setEmailError('')\n    setPasswordError('')\n\n    if (!email && !password) {\n      setEmailError('Email is required')\n\n      setPasswordError('Password is required')\n      return\n    }\n    if (!email) {\n      setEmailError('Email is required')\n      return\n    }\n\n    // if (!isEmailValid(email)) {\n    //   setEmailError(\"Invalid email format\");\n    //   return;\n    // }\n\n    if (!password) {\n      setPasswordError('Password is required')\n      return\n    }\n\n    const data = {\n      email,\n      password\n    }\n    // dispatch(logIn(data));\n\n    try {\n      const response = await fetch('auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n      }).then(response => response.json())\n      console.log(response)\n      if (response.success === true) {\n        console.log('Resonse-user', response.user)\n        // dispatch(setUserData(response.user));\n        localStorage.setItem('xhqr', JSON.stringify(response.user?.xhqr))\n        navigate('/')\n\n        //  setVerificationStatus(true);\n      } else {\n        navigate('/UnverifiedPage')\n      }\n    } catch (error) {\n      console.error('Error verifying link:', error)\n    }\n  }\n\n  return (\n    <div className=\"login_page\">\n      <div className=\"auth_nav_bar\">\n        <AuthNavBar\n          text=\"Don't have an account\"\n          textColor=\"gray\"\n          buttonText=\"Sign up\"\n          buttonColorVaraint=\"primaryOrangeBorderAndText\"\n          buttonOnClick={() => {\n            navigate('/signup')\n          }}\n          textOnClick={() => {}}\n        />\n      </div>\n\n      <div className=\"login_container\">\n        <h3>Welcome Back!</h3>\n        <div className=\"login_details\">\n          <div className=\"email\">\n            <label className=\"email\">Work Email</label>\n            <InputField\n              id=\"email\"\n              value={email}\n              onChangeHandler={e => setEmail(e.target.value)}\n              required\n            />\n            {emailError && <p className=\"error-message\">{emailError}</p>}\n          </div>\n          <div className=\"pass\">\n            <label htmlFor=\"\" className=\"password\">\n              PASSWORD\n            </label>\n            <InputField\n              type=\"password\"\n              value={password}\n              onChangeHandler={e => setPassword(e.target.value)}\n              required\n            />\n            {passwordError && <p className=\"error-message\">{passwordError}</p>}\n          </div>\n          <Link to=\"/forgot-password\">Forgot Password</Link>\n        </div>\n        <div className=\"button\">\n          <button\n            type=\"submit\"\n            className=\"primaryButton\"\n            onClick={loginHandler}\n          >\n            Login\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n",["115","116"],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/TopBar/index.jsx",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/components/Card/index.jsx",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/utils/config.js",[],"/home/shireen/Desktop/qcloud1.0/qCloud-electron-app/src/server/index.js",["117"],"require(\"dotenv\").config();\nconst fs = require(\"fs\");\nconst http = require(\"http\");\n// const express = require(\"express\");\nconst socketIO = require(\"socket.io\");\nconst { v4: uuidv4 } = require(\"uuid\");\nconst socketIOP2P = require(\"socket.io-p2p-server\").Server;\n// const cors = require(\"cors\");\n// const app = express();\n// var bodyParser = require(\"body-parser\");\n// const idToSidDict = {};\n\nconst server = http.createServer();\nconst roomID = uuidv4();\n\n// app.use(bodyParser.urlencoded({ extended: false }));\n// app.use(bodyParser.json());\n// app.use(\n//   cors({\n//     origin: process.env.REACT_APP_URL,\n//     methods: [\"GET\", \"POST\"],\n//   })\n// );\nconsole.log(process.env.REACT_APP_URL);\nconst io = socketIO(server, {\n  cors: {\n    origin: process.env.REACT_APP_URL, // Replace with the origin of your React application\n    methods: [\"GET\", \"POST\"], // Specify the allowed methods\n  },\n});\n\nio.use(socketIOP2P);\n\nio.on(\"connection\", (socket) => {\n  console.log(\"A client connected.\");\n  socket.emit(\"send_room_id\", roomID);\n\n  socket.join(roomID);\n\n  socket.on(\"message\", (data) => {\n    console.log(\"Received message:\", data);\n    // Handle the received message as needed\n  });\n\n  socket.on(\"get_terminal_code\", async (code) => {\n    try {\n      await execShellCommand(code, socket);\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\n  // socket.on(\"get_terminal_code\", async ({ container, code }) => {\n  //   console.log(`docker exec -d ${container} ${code}`);\n  //   const output = await execShellCommand(\n  //     `docker exec ${container} ${code} > output.txt`\n  //   ); // Pass the socket as an argument\n  //   let outputFileName = \"output.txt\";\n  //   fs.readFile(outputFileName, \"utf8\", (err, data) => {\n  //     if (err) {\n  //       console.error(\"Error reading output file:\", err);\n  //       return;\n  //     }\n\n  //     // Emit the output to the client\n  //     socket.emit(\"command_output\", { output: data });\n\n  //     // Remove the output file\n  //     // fs.unlink(outputFileName, (err) => {\n  //     //   if (err) {\n  //     //     console.error(\"Error deleting output file:\", err);\n  //     //     return;\n  //     //   }\n  //     //   console.log(\"Output file deleted.\");\n  //     // });\n  //   });\n  // });\n\n  socket.on(\"disconnect\", () => {\n    console.log(\"A client disconnected.\");\n  });\n});\n\nconst execShellCommand = (cmd, socket) => {\n  console.log(cmd, socket);\n  const exec = require(\"child_process\").exec;\n  return new Promise((resolve, reject) => {\n    const child = exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.log(error.message);\n        socket.emit(\"command_output\", error.message);\n        reject(error);\n      }\n    });\n\n    child.stdout.on(\"data\", (data) => {\n      // console.log(\"stdout:\", data);\n      socket.emit(\"command_output\", data);\n    });\n\n    child.stderr.on(\"data\", (data) => {\n      socket.emit(\"command_output\", data);\n    });\n\n    child.on(\"close\", (code) => {\n      console.log(\"Child process exited with code:\", code);\n    });\n  });\n};\n\n// const execShellCommand = (cmd) => {\n//   const exec = require(\"child_process\").exec;\n\n//   return new Promise((resolve, reject) => {\n//     exec(cmd, (error, stdout, stderr) => {\n//       if (error) {\n//         reject(error);\n//       } else {\n//         resolve(stdout || stderr);\n//       }\n//     });\n//   });\n// };\n\n// app.get(\"/\", (req, res) => {\n//   res.status(200).json({ message: \"Hello From Qcloud Client!\" });\n// });\n\n// // const port = 3001; // Choose a port number\nserver.listen(22, () => {\n  console.log(`Server listening on port 22`);\n});\n\n// const index = (req, res) => {\n//   // res.writeHead(200, { \"Content-Type\": \"application/json\" });\n//   // res.end(JSON.stringify({ message: \"HAHAHAHA\" }));\n// };\n\n// io.on(\"connection\", (socket) => {\n\n//   console.log(\"connect\", socket.id);\n//   console.log(socket.handshake.headers[\"x-real-ip\"]);\n\n//   socket.on(\"set_id\", (data) => {\n//     const { id } = data;\n//     idToSidDict[id] = socket.id;\n//     console.log(idToSidDict);\n//     console.log(id);\n//     socket.emit(\"status\", { status: \"success\" });\n//   });\n\n//   socket.on(\"live_gpu_data\", (data) => {\n//     console.log(`live_gpu_data from sid: ${socket.id}:`, data);\n//   });\n\n//   socket.on(\"disconnect\", () => {\n//     console.log(\"disconnect\", socket.id);\n//   });\n\n//   socket.on(\"get_clients\", () => {\n//     // commented out for testing purposes //\n//     // const clients = Object.keys(io.sockets.adapter.rooms['/']).filter((key) => key !== null);\n//     // const clientsData = {};\n//     // for (const id of clients) {\n//     //   clientsData[id] = idToSidDict[id];\n//     // }\n//     // socket.emit('clients', clientsData);\n\n//     const clientsData = {};\n//     for (const [roomName, room] of io.sockets.adapter.rooms) {\n//       const clients = Array.from(room);\n//       clientsData[roomName] = clients;\n//     }\n//     socket.emit(\"clients\", clientsData);\n//   });\n\n//   socket.on(\"code_run\", (data) => {\n//     const codeRequestDict = {};\n//     console.log(\"Running Code\");\n//     const sid = uuidv4();\n//     codeRequestDict[sid] = socket.id;\n//     const jsonData = JSON.parse(data);\n//     io.to(socket.id).emit(\"code_run\", { code: jsonData.data.code, sid });\n//   });\n\n//   socket.on(\"code_output\", (data) => {\n//     const codeRequestDict = {};\n//     console.log(\"Output From sid:\", socket.id);\n//     console.log(data);\n//     io.to(codeRequestDict[socket.id]).emit(\"message\", data);\n//     delete codeRequestDict[socket.id];\n//   });\n\n//   const docker_start = async () => {\n//     try {\n//       const ackData = await io.to(socket.id).emit(\"docker_start\", {});\n//       console.log(ackData);\n//       return true;\n//     } catch (err) {\n//       console.log(err);\n//     }\n\n//     console.log(\"docker started\");\n//   };\n//   docker_start();\n\n//   // socket.on(\"docker_start\", async (peerSid) => {\n//   // callback(ackData);\n//   // });\n\n//   socket.on(\"docker_stop\", async (peerSid) => {\n//     const ackData = await io.to(peerSid).emit(\"docker_stop\", {});\n//     // callback(ackData);\n//   });\n// });\n\n// server.on(\"request\", index);\n// server.listen(process.env.PORT || 8002, () => {\n//   console.log(`listening on port : ${process.env.PORT}`);\n// });\n",["118","119"],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":5,"column":10,"nodeType":"126","messageId":"127","endLine":5,"endColumn":23},{"ruleId":"124","severity":1,"message":"128","line":6,"column":10,"nodeType":"126","messageId":"127","endLine":6,"endColumn":31},{"ruleId":"124","severity":1,"message":"129","line":37,"column":9,"nodeType":"126","messageId":"127","endLine":37,"endColumn":26},{"ruleId":"124","severity":1,"message":"130","line":47,"column":9,"nodeType":"126","messageId":"127","endLine":47,"endColumn":20},{"ruleId":"124","severity":1,"message":"131","line":29,"column":10,"nodeType":"126","messageId":"127","endLine":29,"endColumn":16},{"ruleId":"124","severity":1,"message":"132","line":1,"column":10,"nodeType":"126","messageId":"127","endLine":1,"endColumn":14},{"ruleId":"133","severity":1,"message":"134","line":22,"column":7,"nodeType":"135","messageId":"136","endLine":22,"endColumn":86},{"ruleId":"124","severity":1,"message":"137","line":68,"column":17,"nodeType":"126","messageId":"127","endLine":68,"endColumn":33},{"ruleId":"124","severity":1,"message":"138","line":190,"column":11,"nodeType":"126","messageId":"127","endLine":190,"endColumn":15},{"ruleId":"139","severity":1,"message":"140","line":37,"column":4,"nodeType":"141","endLine":37,"endColumn":6,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"143","line":1,"column":20,"nodeType":"126","messageId":"127","endLine":1,"endColumn":29},{"ruleId":"124","severity":1,"message":"125","line":6,"column":3,"nodeType":"126","messageId":"127","endLine":6,"endColumn":16},{"ruleId":"124","severity":1,"message":"128","line":10,"column":10,"nodeType":"126","messageId":"127","endLine":10,"endColumn":31},{"ruleId":"124","severity":1,"message":"144","line":13,"column":3,"nodeType":"126","messageId":"127","endLine":13,"endColumn":25},{"ruleId":"124","severity":1,"message":"145","line":14,"column":3,"nodeType":"126","messageId":"127","endLine":14,"endColumn":16},{"ruleId":"124","severity":1,"message":"146","line":20,"column":7,"nodeType":"126","messageId":"127","endLine":20,"endColumn":12},{"ruleId":"124","severity":1,"message":"147","line":7,"column":7,"nodeType":"126","messageId":"127","endLine":7,"endColumn":13},{"ruleId":"124","severity":1,"message":"148","line":22,"column":9,"nodeType":"126","messageId":"127","endLine":22,"endColumn":13},{"ruleId":"133","severity":1,"message":"134","line":51,"column":5,"nodeType":"135","messageId":"136","endLine":51,"endColumn":40},{"ruleId":"133","severity":1,"message":"134","line":66,"column":5,"nodeType":"135","messageId":"136","endLine":66,"endColumn":43},{"ruleId":"124","severity":1,"message":"149","line":130,"column":21,"nodeType":"126","messageId":"127","endLine":130,"endColumn":27},{"ruleId":"124","severity":1,"message":"149","line":145,"column":21,"nodeType":"126","messageId":"127","endLine":145,"endColumn":27},{"ruleId":"124","severity":1,"message":"150","line":5,"column":3,"nodeType":"126","messageId":"127","endLine":5,"endColumn":16},{"ruleId":"124","severity":1,"message":"151","line":7,"column":3,"nodeType":"126","messageId":"127","endLine":7,"endColumn":16},{"ruleId":"124","severity":1,"message":"152","line":19,"column":9,"nodeType":"126","messageId":"127","endLine":19,"endColumn":17},{"ruleId":"124","severity":1,"message":"138","line":50,"column":11,"nodeType":"126","messageId":"127","endLine":50,"endColumn":15},{"ruleId":"120","replacedBy":"153"},{"ruleId":"122","replacedBy":"154"},{"ruleId":"124","severity":1,"message":"155","line":2,"column":7,"nodeType":"126","messageId":"127","endLine":2,"endColumn":9},{"ruleId":"120","replacedBy":"156"},{"ruleId":"122","replacedBy":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'removeGpuData' is defined but never used.","Identifier","unusedVar","'removeSshCredientials' is defined but never used.","'handleInputChange' is assigned a value but never used.","'handleLogin' is assigned a value but never used.","'errors' is assigned a value but never used.","'pool' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'validInsertedIds' is assigned a value but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'systemSpecs'. Either include it or remove the dependency array.","ArrayExpression",["160"],"'useEffect' is defined but never used.","'stopAndDeleteContainer' is defined but never used.","'stopContainer' is defined but never used.","'ngrok' is assigned a value but never used.","'docker' is assigned a value but never used.","'PORT' is assigned a value but never used.","'stderr' is assigned a value but never used.","'ClickableText' is defined but never used.","'PrimaryButton' is defined but never used.","'dispatch' is assigned a value but never used.",["158"],["159"],"'fs' is assigned a value but never used.",["158"],["159"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},"Update the dependencies array to be: [systemSpecs]",{"range":"163","text":"164"},[1300,1302],"[systemSpecs]"]