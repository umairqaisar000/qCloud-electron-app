[{"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/index.js":"1","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/App.js":"2","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/FilesViewer.js":"3","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Icons.js":"4","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/HomePage/index.jsx":"5","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/SystemSpecs/index.jsx":"6","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/utils/scripts.js":"7","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/GpuData/index.js":"8","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/services/dockerCreation.js":"9","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/LoginPage/index.jsx":"10","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/SignupPage/index.jsx":"11","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Context/AuthContext.js":"12","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/GpuNode/index.jsx":"13","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/PoolConnection/index.js":"14","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/sshData/index.js":"15"},{"size":262,"mtime":1690176678551,"results":"16","hashOfConfig":"17"},{"size":692,"mtime":1690177674575,"results":"18","hashOfConfig":"17"},{"size":780,"mtime":1689576019681,"results":"19","hashOfConfig":"17"},{"size":1242,"mtime":1689576019685,"results":"20","hashOfConfig":"17"},{"size":906,"mtime":1690261549245,"results":"21","hashOfConfig":"17"},{"size":1492,"mtime":1690292855061,"results":"22","hashOfConfig":"17"},{"size":2543,"mtime":1690260834879,"results":"23","hashOfConfig":"17"},{"size":2134,"mtime":1690347338954,"results":"24","hashOfConfig":"17"},{"size":1902,"mtime":1690347033220,"results":"25","hashOfConfig":"17"},{"size":4583,"mtime":1690286314194,"results":"26","hashOfConfig":"17"},{"size":4661,"mtime":1689860317914,"results":"27","hashOfConfig":"17"},{"size":941,"mtime":1690286350805,"results":"28","hashOfConfig":"17"},{"size":3593,"mtime":1690347323081,"results":"29","hashOfConfig":"17"},{"size":598,"mtime":1690292618249,"results":"30","hashOfConfig":"17"},{"size":1197,"mtime":1690356414753,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"5u6ihz",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/index.js",[],["69","70"],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/App.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/FilesViewer.js",[],["71","72"],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Icons.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/HomePage/index.jsx",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/SystemSpecs/index.jsx",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/utils/scripts.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/GpuData/index.js",["73","74"],"import { pool } from '../PoolConnection'\nimport { addSshCredientials } from '../../database/sshData'\n\nexport const addGpuData = async (systemSpecs, user_id, image_id) => {\n  const gpuData = systemSpecs['gpu'] ? systemSpecs['gpu'][0] : null\n  const ramData = systemSpecs['ram']\n  const cpuData = systemSpecs['cpu']\n\n  // Insert the data into the PostgreSQL database\n  console.log('data::', user_id, image_id)\n  \n  if(user_id === null && image_id === null)\n  { \n    throw ('Error adding data to the database ERROR: User or Docker Image Not Found')\n  }\n\n  const query =\n  'INSERT INTO system_specs (gpu_name, gpu_free, gpu_used, gpu_total, ram_free, ram_used, cpu_name, user_id, image_id) VALUES ($1, $2, $3, $4, $5, $6, $7,$8, $9) RETURNING id'\n\n  const values = [\n    gpuData ? gpuData.name : null,\n    gpuData ? gpuData.free : null,\n    gpuData ? gpuData.used : null,\n    gpuData ? gpuData.total : null,\n    ramData ? ramData.free : null,\n    ramData ? ramData.used : null,\n    cpuData ? cpuData : null,\n    user_id ? user_id : null,\n    image_id ? image_id : null\n  ]\n\n  try {\n    const result = await pool.query(query, values)\n    const insertedId = result.rows[0].id\n    localStorage.setItem('current_job_id', insertedId)\n    console.log('Inserted data with ID:', insertedId)\n\n    await addSshCredientials()\n\n  } catch (err) {\n    console.error('Error inserting data', err)\n    throw ('Error inserting data', err)\n  }\n}\n\nexport const removeGpuData = async () => {\n  // Insert the data into the PostgreSQL database\n    const query = `DELETE FROM system_specs s WHERE s.id = ${localStorage.getItem(\n      'current_job_id'\n    )}`\n\n    try {\n      const result = await pool.query(query)\n      localStorage.removeItem('current_job_id')\n    } catch (err) {\n      throw ('Error Deleting data', err)\n    }\n}\n\nexport const getImageId = async user_id => {\n  // Insert the data into the PostgreSQL database\n\n  const query = `SELECT image_id FROM system_specs s WHERE s.user_id = ${user_id}`\n  try {\n    const result = await pool.query(query)\n    return result?.rows[0]?.image_id\n  } catch (err) {\n    throw ('Error getting data', err)\n  }\n}\n","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/services/dockerCreation.js",["75","76","77","78"],"const Docker = window.require('dockerode')\nconst { exec } = window.require('child_process')\n\nconst docker = new Docker()\n\nconst execShellCommand = cmd => {\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stdout || stderr)\n      }\n    })\n  })\n}\n\nexport async function createAndStartDocker(imageName, container_image_name) {\n  const PORT = 2222\n\n  console.log('Creating Docker image...')\n  try {\n    await execShellCommand(\n      `docker build --rm -t ${imageName} -f /home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/server/Dockerfile .`\n    )\n  } catch (error) {\n    console.error('Error Creating Docker image:', error)\n    throw 'Error Creating Docker image'\n  }\n\n  console.log('Running Docker container...')\n  try {\n    execShellCommand(\n      `docker run -d -p 2222:22 --name ${imageName} ${imageName}`\n      // `docker run -p ${PORT}:22 --name ${container_image_name} ${imageName}:latest`\n    )\n  } catch (error) {\n    console.error('Error running Docker container:', error)\n    throw 'Error running Docker container'\n  }\n}\n\n\n\nexport function stopAndDeleteContainer(imageName) {\n  // Stop the container\n  const stopCommand = `docker stop ${imageName}`;\n  exec(stopCommand, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`Error stopping the container: ${imageName}`);\n      console.error(stderr);\n    } else {\n      console.log(`Container ${imageName} stopped successfully.`);\n      // Delete the container\n      const deleteCommand = `docker rm ${imageName}`;\n      exec(deleteCommand, (error, stdout, stderr) => {\n        if (error) {\n          console.error(`Error deleting the container: ${imageName}`);\n          console.error(stderr);\n        } else {\n          console.log(`Container ${imageName} deleted successfully.`);\n        }\n      });\n    }\n  });\n}","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/LoginPage/index.jsx",["79"],"import React, { useState, useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { pool } from '../../database/PoolConnection'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './style.css'\nimport * as Yup from 'yup'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const navigate = useNavigate()\n  const { login } = useContext(AuthContext)\n  const [errors, setErrors] = useState({ email: '', password: '' })\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleLogin = async () => {\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message;\n              return acc;\n            },\n            {}\n          )\n          setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n         \n          Object.values(validationErrorsMap).forEach((errorMsg) => {\n            toast.error(errorMsg);\n          });\n        }\n        return;\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const query = 'SELECT * FROM client_user WHERE email = $1'\n        const result = await client.query(query, [email])\n\n        if (result.rowCount === 1) {\n          const storedPassword = result.rows[0].password // Assuming the password column is named \"password\" in the database\n          console.log('storedPassword:', storedPassword)\n          // Compare the stored password with the entered password\n          const passwordMatch = await bcrypt.compare(password, storedPassword)\n\n          if (passwordMatch) {\n            console.log('User authenticated')\n            //   setIsAuthenticated(true)\n            //   localStorage.setItem('userData', email);\n            login(result.rows[0].id, result.rows[0].email)\n            navigate('/homepage')\n          } else {\n            console.log('Invalid email or password')\n          }\n\n          client.release()\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return (\n    <div className=\"login-container\">\n       <ToastContainer /> \n      <form className=\"login-form\">\n        <h2 className=\"login-heading\">Login</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"login-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            className=\"login-input\"\n            id=\"email\"\n            value={email}\n            onChange={handleInputChange}\n            placeholder=\"Enter your email\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"login-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"login-input\"\n            name=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={handleInputChange}\n            placeholder=\"Enter your password\"\n          />\n        </div>\n        <button type=\"button\" className=\"login-button\" onClick={handleLogin}>\n          Login\n        </button>\n        <a href=\"./Signup\" className=\"signup-link\">\n          Don't have an account? Sign up\n        </a>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginPage\n","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/SignupPage/index.jsx",["80"],"import React, { useState } from 'react'\nimport { pool } from '../../database/PoolConnection'\nimport { Modal, Button } from 'react-bootstrap'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.css' // Import custom CSS file for Signup component styling\nimport * as Yup from 'yup'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst SignupPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showModal, setShowModal] = useState(false) // State to control the modal visibility\n  const [errors, setErrors] = useState({ email: '', password: '' })\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleSignup = async () => {\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message\n              return acc\n            },\n            {}\n          )\n          setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n\n          Object.values(validationErrorsMap).forEach(errorMsg => {\n            toast.error(errorMsg)\n          })\n        }\n        return\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const saltRounds = 10\n        const hashedPassword = await bcrypt.hash(password, saltRounds)\n        const query =\n          'INSERT INTO client_user (email, password) VALUES ($1, $2)'\n        await client.query(query, [email, hashedPassword])\n        console.log('User registered')\n        client.release()\n        setShowModal(true) // Show the success modal\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false) // Close the modal\n  }\n\n  return (\n    <div className=\"signup-container\">\n      <ToastContainer /> \n      <form className=\"signup-form\">\n        <h2 className=\"signup-heading\">Signup</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"signup-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"signup-input\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"signup-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"signup-input\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Enter your password\"\n            value={password}\n            onChange={handleInputChange}\n          />\n        </div>\n        <button type=\"button\" className=\"signup-button\" onClick={handleSignup}>\n          Signup\n        </button>\n        <a href=\"/\" className=\"login-link\">\n          Already have an account? Login\n        </a>\n\n        {/* Success Modal */}\n        <Modal show={showModal} onHide={handleCloseModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Success</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            User registration successful. You can now log in with your\n            credentials.\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleCloseModal}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </form>\n    </div>\n  )\n}\n\nexport default SignupPage\n","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Context/AuthContext.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/GpuNode/index.jsx",["81"],"import { useState, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid';\nimport { Card, Button, Alert } from 'react-bootstrap'\n\nimport { addGpuData, removeGpuData } from '../../database/GpuData'\nimport { removeSshCredientials } from '../../database/sshData'\n\nimport { createAndStartDocker, stopAndDeleteContainer } from '../../services/dockerCreation'\nimport { execShellCommand } from '../../utils/scripts';\n\nconst ngrok = window.require('ngrok')\n\nconst ID = uuidv4();\n\nconst IMAGE_NAME = `client_dk_${ID}`\nconst CONTAINER_IMAGE_NAME = `client_dk_container_${ID}`\n\nconst GpuNode = ({ systemSpecs,isRunning }) => {\n  const [errorMessage, setErrorMessage] = useState('')\n  const [isLend, setIsLend] = useState(isRunning)\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false)\n\n  const handleLend = async () => {\n    try {\n      if (systemSpecs) {\n        await createAndStartDocker(IMAGE_NAME, CONTAINER_IMAGE_NAME)\n        const image_id = await execShellCommand(`docker images -q ${IMAGE_NAME}`)\n        const user_id = JSON.parse(localStorage.getItem('userData')).id\n        console.log(user_id,image_id)\n        await addGpuData(systemSpecs, user_id, image_id)\n        setShowSuccessMessage(true)\n        setIsLend(true);\n        setTimeout(() => setShowSuccessMessage(false), 5000)\n      }\n    } catch (err) {\n      setErrorMessage('Lending failed. Please try again. Error: ' + err.message)\n      setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n      console.log(err)\n    }\n  }\n  \n  const handleWithdraw = async () => {\n    try {\n      await removeSshCredientials();\n      await removeGpuData();\n      await stopAndDeleteContainer(IMAGE_NAME)\n      await ngrok.disconnect();\n      setIsLend(false)\n    } catch (err) {\n      setErrorMessage('Withdrawal failed. Please try again. Error: ' + err.message)\n      setTimeout(() => setErrorMessage(err), 5000) // Clear error message after 5 seconds\n      console.log(err)\n    }\n\n  }\n  \n  return (\n    <>\n      {showSuccessMessage && (\n        <Alert\n          variant=\"primary\"\n          className=\"position-fixed top-0 end-0 mt-4 me-4\"\n          onClose={() => setShowSuccessMessage(false)}\n          dismissible\n        >\n          {!isLend ? \"Withdrawn success!\" : \"Lending success!\"}\n        </Alert>\n      )}\n      {errorMessage && (\n        <Alert\n          variant=\"danger\"\n          className=\"position-fixed top-0 end-0 mt-4 me-4\"\n          onClose={() => setErrorMessage(false)}\n          dismissible\n        >\n          {errorMessage}\n        </Alert>\n      )}\n      <Card className=\"p-5 bg-dark text-light mt-4\">\n        {systemSpecs['gpu'] !== undefined ? (\n          systemSpecs['gpu']?.length >= 0 &&\n          systemSpecs['gpu']?.map((gpu, i) => (\n            <>\n              <h3>{`GPU: ${gpu.name}`}</h3>\n              <div>\n                {`Free: ${gpu.free} MB`}\n                <br></br>\n                {`Used: ${gpu.used} MB`}\n                <br></br>\n                {`Total: ${gpu.total} MB`}\n              </div>\n            </>\n          ))\n        ) : (\n          <h3>No GPU</h3>\n        )}\n        <h3>VRAM</h3>\n        <p>\n          {`Free: ${systemSpecs['ram'].free} MB`}\n          <br></br>\n          {`Used: ${systemSpecs['ram'].used} MB`}\n        </p>\n        <h3>{`CPU: ${systemSpecs['cpu']}`}</h3>\n        {!isLend ?\n        <Button variant=\"secondary\" onClick={handleLend}>\n          Lend\n        </Button> : <Button variant=\"light\" onClick={handleWithdraw}>\n          Withdraw\n        </Button>}\n      </Card>\n    </>\n  )\n}\n\nexport default GpuNode\n","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/PoolConnection/index.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/sshData/index.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"82","replacedBy":"86"},{"ruleId":"84","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":14,"column":5,"nodeType":"90","messageId":"91","endLine":14,"endColumn":86},{"ruleId":"92","severity":1,"message":"93","line":53,"column":13,"nodeType":"94","messageId":"95","endLine":53,"endColumn":19},{"ruleId":"92","severity":1,"message":"96","line":4,"column":7,"nodeType":"94","messageId":"95","endLine":4,"endColumn":13},{"ruleId":"92","severity":1,"message":"97","line":19,"column":9,"nodeType":"94","messageId":"95","endLine":19,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":28,"column":5,"nodeType":"90","messageId":"91","endLine":28,"endColumn":40},{"ruleId":"88","severity":1,"message":"89","line":39,"column":5,"nodeType":"90","messageId":"91","endLine":39,"endColumn":43},{"ruleId":"92","severity":1,"message":"98","line":31,"column":10,"nodeType":"94","messageId":"95","endLine":31,"endColumn":16},{"ruleId":"92","severity":1,"message":"98","line":29,"column":10,"nodeType":"94","messageId":"95","endLine":29,"endColumn":16},{"ruleId":"92","severity":1,"message":"99","line":1,"column":20,"nodeType":"94","messageId":"95","endLine":1,"endColumn":29},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],["100"],["101"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","'docker' is assigned a value but never used.","'PORT' is assigned a value but never used.","'errors' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]