[{"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/index.js":"1","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/App.js":"2","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/FilesViewer.js":"3","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Icons.js":"4","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/HomePage/index.jsx":"5","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/SystemSpecs/index.jsx":"6","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/utils/scripts.js":"7","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/GpuData/index.js":"8","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/services/dockerCreation.js":"9","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/LoginPage/index.jsx":"10","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/SignupPage/index.jsx":"11","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Context/AuthContext.js":"12","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/GpuNode/index.jsx":"13","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/PoolConnection/index.js":"14","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/sshData/index.js":"15"},{"size":262,"mtime":1689588962370,"results":"16","hashOfConfig":"17"},{"size":845,"mtime":1689743996334,"results":"18","hashOfConfig":"17"},{"size":780,"mtime":1689576019681,"results":"19","hashOfConfig":"20"},{"size":1242,"mtime":1689576019685,"results":"21","hashOfConfig":"20"},{"size":676,"mtime":1689748340792,"results":"22","hashOfConfig":"17"},{"size":851,"mtime":1689769062444,"results":"23","hashOfConfig":"17"},{"size":2614,"mtime":1689837442781,"results":"24","hashOfConfig":"17"},{"size":1286,"mtime":1689747471171,"results":"25","hashOfConfig":"17"},{"size":1489,"mtime":1689834793939,"results":"26","hashOfConfig":"17"},{"size":4574,"mtime":1689748004648,"results":"27","hashOfConfig":"17"},{"size":4661,"mtime":1689744765518,"results":"28","hashOfConfig":"17"},{"size":959,"mtime":1689748549701,"results":"29","hashOfConfig":"17"},{"size":2585,"mtime":1689834777781,"results":"30","hashOfConfig":"17"},{"size":598,"mtime":1689742841907,"results":"31","hashOfConfig":"17"},{"size":801,"mtime":1689834570346,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"1hwxspf",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"5u6ihz",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/index.js",[],["68","69"],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/App.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/FilesViewer.js",[],["70","71"],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Icons.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/HomePage/index.jsx",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/SystemSpecs/index.jsx",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/utils/scripts.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/GpuData/index.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/services/dockerCreation.js",["72","73"],"const Docker = window.require('dockerode')\nconst { exec } = window.require('child_process')\n\n\nconst docker = new Docker()\nvar RUNNING_CONTAINER = false\n\nconst execShellCommand = cmd => {\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stdout || stderr)\n      }\n    })\n  })\n}\n\nasync function createAndStartDocker(imageName, container_image_name) {\n  const PORT = 2222\n\n  if (RUNNING_CONTAINER) {\n    console.log('Container already running, please stop it first.')\n    return {\n      status:\n        'Container already running. Please stop it by calling the docker_stop endpoint.'\n    }\n  }\n\n  console.log('Creating Docker image...')\n\n  try {\n    await execShellCommand(\n      `docker build --rm -t ${imageName} -f src/server/Dockerfile .`\n    )\n  } catch (error) {\n    console.error('Error Creating Docker image:', error)\n    return {\n      status: 'Error Creating Docker image'\n    }\n  }\n\n  RUNNING_CONTAINER = true\n\n  console.log('Running Docker container...')\n  try {\n    execShellCommand(\n      `docker run -d -p 2222:22 --name ${imageName} ${imageName}`\n      // `docker run -p ${PORT}:22 --name ${container_image_name} ${imageName}:latest`\n    )\n  } catch (error) {\n    console.error('Error running Docker container:', error)\n    RUNNING_CONTAINER = false\n    return {\n      status: 'Error running Docker container'\n    }\n  }\n}\n\nmodule.exports = {\n  createAndStartDocker\n}\n","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/LoginPage/index.jsx",["74"],"import React, { useState, useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { AuthContext } from '../../Context/AuthContext'\nimport { pool } from '../../database/PoolConnection'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './style.css'\nimport * as Yup from 'yup'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const navigate = useNavigate()\n  const { login } = useContext(AuthContext)\n  const [errors, setErrors] = useState({ email: '', password: '' })\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleLogin = async () => {\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message;\n              return acc;\n            },\n            {}\n          )\n          setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n         \n          Object.values(validationErrorsMap).forEach((errorMsg) => {\n            toast.error(errorMsg);\n          });\n        }\n        return;\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const query = 'SELECT * FROM client_user WHERE email = $1'\n        const result = await client.query(query, [email])\n\n        if (result.rowCount === 1) {\n          const storedPassword = result.rows[0].password // Assuming the password column is named \"password\" in the database\n          console.log('storedPassword:', storedPassword)\n          // Compare the stored password with the entered password\n          const passwordMatch = await bcrypt.compare(password, storedPassword)\n\n          if (passwordMatch) {\n            console.log('User authenticated')\n            //   setIsAuthenticated(true)\n            //   localStorage.setItem('userData', email);\n            login(email, result.rows[0].password)\n            navigate('/homepage')\n          } else {\n            console.log('Invalid email or password')\n          }\n\n          client.release()\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return (\n    <div className=\"login-container\">\n       <ToastContainer /> \n      <form className=\"login-form\">\n        <h2 className=\"login-heading\">Login</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"login-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            className=\"login-input\"\n            id=\"email\"\n            value={email}\n            onChange={handleInputChange}\n            placeholder=\"Enter your email\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"login-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"login-input\"\n            name=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={handleInputChange}\n            placeholder=\"Enter your password\"\n          />\n        </div>\n        <button type=\"button\" className=\"login-button\" onClick={handleLogin}>\n          Login\n        </button>\n        <a href=\"./Signup\" className=\"signup-link\">\n          Don't have an account? Sign up\n        </a>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginPage\n","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/views/SignupPage/index.jsx",["75"],"import React, { useState } from 'react'\nimport { pool } from '../../database/PoolConnection'\nimport { Modal, Button } from 'react-bootstrap'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './style.css' // Import custom CSS file for Signup component styling\nimport * as Yup from 'yup'\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .min(8, 'email must be at least 8 characters long')\n    .required('email is required'),\n  password: Yup.string()\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(/[a-z]/, 'Password must contain at least one lowercase char')\n    .matches(/[A-Z]/, 'Password must contain at least one uppercase char')\n    .matches(/[0-9]+/, 'Password must contains at least one number.')\n    .matches(\n      /[!@#$%^&*(),.?\":{}|<>]/,\n      'Password must contain at least one specialdispatch(increment()) char'\n    )\n    .required('Password is required')\n})\n\nconst SignupPage = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showModal, setShowModal] = useState(false) // State to control the modal visibility\n  const [errors, setErrors] = useState({ email: '', password: '' })\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n    setErrors(prevErrors => ({ ...prevErrors, [name]: '' }))\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  const handleSignup = async () => {\n    try {\n      const isValid = await validationSchema.isValid({ email, password })\n      if (!isValid) {\n        try {\n          await validationSchema.validate(\n            { email, password },\n            { abortEarly: false }\n          )\n        } catch (validationErrors) {\n          const validationErrorsMap = validationErrors.inner.reduce(\n            (acc, error) => {\n              acc[error.path] = error.message\n              return acc\n            },\n            {}\n          )\n          setErrors(prevErrors => ({ ...prevErrors, ...validationErrorsMap }))\n\n          Object.values(validationErrorsMap).forEach(errorMsg => {\n            toast.error(errorMsg)\n          })\n        }\n        return\n      } else {\n        const client = await pool.connect()\n        const bcrypt = window.require('bcrypt')\n        const saltRounds = 10\n        const hashedPassword = await bcrypt.hash(password, saltRounds)\n        const query =\n          'INSERT INTO client_user (email, password) VALUES ($1, $2)'\n        await client.query(query, [email, hashedPassword])\n        console.log('User registered')\n        client.release()\n        setShowModal(true) // Show the success modal\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false) // Close the modal\n  }\n\n  return (\n    <div className=\"signup-container\">\n      <ToastContainer /> \n      <form className=\"signup-form\">\n        <h2 className=\"signup-heading\">Signup</h2>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"signup-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"signup-input\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"signup-label\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"signup-input\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Enter your password\"\n            value={password}\n            onChange={handleInputChange}\n          />\n        </div>\n        <button type=\"button\" className=\"signup-button\" onClick={handleSignup}>\n          Signup\n        </button>\n        <a href=\"/\" className=\"login-link\">\n          Already have an account? Login\n        </a>\n\n        {/* Success Modal */}\n        <Modal show={showModal} onHide={handleCloseModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Success</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            User registration successful. You can now log in with your\n            credentials.\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleCloseModal}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </form>\n    </div>\n  )\n}\n\nexport default SignupPage\n","/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/Context/AuthContext.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/components/GpuNode/index.jsx",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/PoolConnection/index.js",[],"/home/qlu/Projects/fs-Qcloud-Electron/react-electron/src/database/sshData/index.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":5,"column":7,"nodeType":"84","messageId":"85","endLine":5,"endColumn":13},{"ruleId":"82","severity":1,"message":"86","line":21,"column":9,"nodeType":"84","messageId":"85","endLine":21,"endColumn":13},{"ruleId":"82","severity":1,"message":"87","line":31,"column":10,"nodeType":"84","messageId":"85","endLine":31,"endColumn":16},{"ruleId":"82","severity":1,"message":"87","line":29,"column":10,"nodeType":"84","messageId":"85","endLine":29,"endColumn":16},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],["88"],["89"],"no-unused-vars","'docker' is assigned a value but never used.","Identifier","unusedVar","'PORT' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]